@attribute [Authorize]
@page "/create-account"
@using Blazor.Data.Models
@using Blazor.Data.Services
@using Blazor.Data.Services.Base
@using Blazor.Data.Services.Interfaces
@using Microsoft.Extensions.Logging
@using Blazor.Data.Services.Interfaces
@inject IAccountsService _accountService;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject IUsersService _usersService
@inject ProtectedLocalStorage _localStorage
<div class="row">
    <div class="col-5 shadow-lg p-5 border m-2 border-opacity-25 bg-light bg-gradient">
        <h2 class="text-center mb-3">Create Account</h2>
        <EditForm Model="@accountRequest" OnSubmit="@SubmitForm">
            <div class="input-group mb-3">
                <label class="input-group-text">Currency</label>
                <select placeholder="EUR" class="form-select" aria-label="accountSelect" id="accountSelect"
                    @bind="accountRequest.Currency">
                    @foreach (string currency in currencys)
                    {
                        <option value="@currency" for="accountSelect">@currency</option>
                    }
                </select>

            </div>
            <div class="input-group mb-3">
                <span class="input-group-text" id="basic-addon1">Amount</span>
                <input placeholder="0" type="number" @bind="accountRequest.Amount">
            </div>

            <p>
                <button class="btn btn-outline-dark" type="submit">Create Account</button>
                <button class="btn btn-outline-dark" type="btn" @onclick="OnCancelClick">Cancel</button>
            </p>
        </EditForm>
    </div>
</div>

@code {

    string[] currencys = new string[] { "EUR", "DOL" };
    private Data.Models.CreateAccount accountRequest = new();
    [CascadingParameter]
    public EventCallback SessionStatusEvent { get; set; }

    private async Task OnCancelClick()
    {
        Console.WriteLine("My debug cancel.");
    }

    private async Task SubmitForm()
    {
        var response = await _accountService.PostAccountAsync(accountRequest);
        if (response.Item3 == "token expired")
        {
            await SessionStatusEvent.InvokeAsync();
            return;
        }
        if (!response.Item1)
            return;

        StateHasChanged();
    }
}