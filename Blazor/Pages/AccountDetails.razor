@attribute [Authorize]
@using Blazor.Data.Services
@using Blazor.Data.Services.Base
@using Blazor.Data.Services.Interfaces
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<NavMenu> Loc
@inject NavigationManager _navigationManager
@inject IAccountsService _accountService
@inject ITransfersService _transfersService

@page "/account/{id:int}"

<div class="row mb-2">
    <div class="col-8"></div>
    <div class="col-2">
        <button class="btn btn-sm btn-outline-info" @onclick="RedirectToAccounts"> @Loc["Back"] </button>
    </div>
</div>
<div class="row">
    @if (account != null)
    {
        <h3> Account </h3>
        <table class="table w-25">
            <tr>
                <td scope="row"> @Loc["Account nr."] </td>
                <td>@account.Account.Id</td>
            </tr>
            <tr>
                <td> @Loc["Currency"] </td>
                <td>@account.Account.Currency</td>
            </tr>
            <tr>
                <td> @Loc["Balance"] </td>
                <td>@account.Account.Balance</td>
            </tr>

        </table>
        <td><button class="btn btn-outline-dark"
            @onclick="@(e => GoToAccountDocuments(account.Account.Id))">@Loc["Documents"]</button></td>

        <h3 class="mt-5"> Moviments Account </h3>
        <table class="table table-striped w-75">
            <thead>
                <tr>
                    <th scope="col"> @Loc["Date"] </th>
                    <th scope="col"> @Loc["Hour"] </th>
                    <th scope="col"> @Loc["Amount"] </th>
                </tr>
            </thead>
            <tbody>
                @foreach (Movim movim in account.Movims)
                {
                    <tr>
                        <td scope="row">@movim.CreatedAt.ToString("dd/MM/yyyy") </td>
                        <td scope="row">@movim.CreatedAt.ToString("HH:mm:ss") </td>
                        <td>@movim.Amount</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {

    [Parameter]

    public int id { get; set; }
    [CascadingParameter]

    public EventCallback SessionStatusEvent { get; set; }

    private Blazor.Data.Services.Base.GetAccountResponse? account;

    protected override async Task OnInitializedAsync()

    {
        var result = await _accountService.GetAccountDetails(id);

        if (result.Item3 == "token expired")

        {

            await SessionStatusEvent.InvokeAsync();
            return;
        }



        if (!result.Item1)
            return;
        account = result.Item2;
        StateHasChanged();
    }

    protected void RedirectToAccounts()

    {
        _navigationManager.NavigateTo("/Accounts");
    }
    public void GoToAccountDocuments(int accountId)
    {
        _navigationManager.NavigateTo($"/account/{accountId}/documents", true);
    }
}
