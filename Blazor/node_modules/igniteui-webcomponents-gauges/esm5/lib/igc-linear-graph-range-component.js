import * as tslib_1 from "tslib";
import { TypeRegistrar } from "igniteui-webcomponents-core";
import { brushToString, stringToBrush, toSpinal, initializePropertiesFromCss, NamePatcher, getAllPropertyNames, fromSpinal } from "igniteui-webcomponents-core";
import { XamLinearGraphRange } from "./XamLinearGraphRange";
import { RegisterElementHelper } from "igniteui-webcomponents-core";
import { IgcHTMLElement } from "igniteui-webcomponents-core";
var IgcLinearGraphRangeComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgcLinearGraphRangeComponent, _super);
    function IgcLinearGraphRangeComponent() {
        var _this = _super.call(this) || this;
        _this._renderer = null;
        _this._settingAttributes = false;
        _this._attached = false;
        _this._queuedSetAttributes = [];
        _this._updatingFromAttribute = false;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._implementation = _this.createImplementation();
        _this._implementation.externalObject = _this;
        _this.onImplementationCreated();
        return _this;
    }
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    IgcLinearGraphRangeComponent.prototype.onImplementationCreated = function () {
    };
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "rangeInternal", {
        get: function () {
            return this.i;
        },
        enumerable: true,
        configurable: true
    });
    IgcLinearGraphRangeComponent.prototype.createImplementation = function () {
        return new XamLinearGraphRange();
    };
    IgcLinearGraphRangeComponent.prototype.ngOnInit = function () {
    };
    IgcLinearGraphRangeComponent.prototype._provideRenderer = function (renderer) {
        this._renderer = renderer;
    };
    IgcLinearGraphRangeComponent._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igc" + name + "Component";
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgcLinearGraphRangeComponent.prototype._enqueueSetAttribute = function (attrName, attrValue) {
        this._queuedSetAttributes.push({ attrName: attrName, attrValue: attrValue });
    };
    IgcLinearGraphRangeComponent.prototype._flushQueuedAttributes = function () {
        this._settingAttributes = true;
        for (var i = 0; i < this._queuedSetAttributes.length; i++) {
            this.setAttribute(this._queuedSetAttributes[i].attrName, this._queuedSetAttributes[i].attrValue);
        }
        this._settingAttributes = false;
        this._queuedSetAttributes.length = 0;
    };
    IgcLinearGraphRangeComponent.prototype._a = function (attrName, attrValue) {
        if (this._updatingFromAttribute) {
            return;
        }
        if (attrValue) {
            attrValue = attrValue.toString();
        }
        this._settingAttributes = true;
        attrName = toSpinal(attrName);
        if (this._attached) {
            this.setAttribute(attrName, attrValue);
        }
        else {
            this._enqueueSetAttribute(attrName, attrValue);
        }
        this._settingAttributes = false;
    };
    Object.defineProperty(IgcLinearGraphRangeComponent, "observedAttributes", {
        get: function () {
            if (IgcLinearGraphRangeComponent._observedAttributesIgcLinearGraphRangeComponent == null) {
                var names = getAllPropertyNames(IgcLinearGraphRangeComponent);
                for (var i = 0; i < names.length; i++) {
                    names[i] = toSpinal(names[i]);
                }
                IgcLinearGraphRangeComponent._observedAttributesIgcLinearGraphRangeComponent = names;
            }
            return IgcLinearGraphRangeComponent._observedAttributesIgcLinearGraphRangeComponent;
        },
        enumerable: true,
        configurable: true
    });
    IgcLinearGraphRangeComponent.prototype.attributeChangedCallback = function (name, oldValue, newValue) {
        if (this._settingAttributes) {
            return;
        }
        var setName = fromSpinal(name);
        this._updatingFromAttribute = true;
        this[setName] = newValue;
        this._updatingFromAttribute = false;
    };
    IgcLinearGraphRangeComponent.register = function () {
        if (!IgcLinearGraphRangeComponent._isElementRegistered) {
            IgcLinearGraphRangeComponent._isElementRegistered = true;
            RegisterElementHelper.registerElement(IgcLinearGraphRangeComponent.htmlTagName, IgcLinearGraphRangeComponent);
        }
    };
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "name", {
        /**
     * Gets or sets the name of the range.
    */
        get: function () {
            return this.i.u;
        },
        set: function (v) {
            this.i.u = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "brush", {
        /**
         * Gets or sets the brush to use to fill the range.
        */
        get: function () {
            return brushToString(this.i.an);
        },
        set: function (v) {
            this.i.an = stringToBrush(v);
            this._a("brush", brushToString(this.i.an));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "outline", {
        /**
         * Gets or sets the outline to use when rendering the range.
        */
        get: function () {
            return brushToString(this.i.ao);
        },
        set: function (v) {
            this.i.ao = stringToBrush(v);
            this._a("outline", brushToString(this.i.ao));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "startValue", {
        /**
         * Gets or sets the value at which the range starts along the scale.
        */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            this.i.o = +v;
            this._a("startValue", this.i.o);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "endValue", {
        /**
         * Gets or sets the value at which the range ends along the scale.
        */
        get: function () {
            return this.i.j;
        },
        set: function (v) {
            this.i.j = +v;
            this._a("endValue", this.i.j);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "innerStartExtent", {
        /**
         * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to start rendering the inner edge of the range.
         * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = +v;
            this._a("innerStartExtent", this.i.l);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "innerEndExtent", {
        /**
         * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to end rendering the inner edge of the range.
         * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
        */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            this.i.k = +v;
            this._a("innerEndExtent", this.i.k);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "outerStartExtent", {
        /**
         * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to start rendering the outer edge of the range.
         * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
        */
        get: function () {
            return this.i.n;
        },
        set: function (v) {
            this.i.n = +v;
            this._a("outerStartExtent", this.i.n);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "outerEndExtent", {
        /**
         * Gets or sets the distance measured from the front/bottom of the bullet graph (from 0 to 1) at which to end rendering the outer edge of the range.
         * Values further from zero than 1 can be used to make this extend further than the normal width/height of the bullet graph.
        */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            this.i.m = +v;
            this._a("outerEndExtent", this.i.m);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "strokeThickness", {
        /**
         * Gets or sets the stroke thickness to use when rendering this range's outline.
        */
        get: function () {
            return this.i.p;
        },
        set: function (v) {
            this.i.p = +v;
            this._a("strokeThickness", this.i.p);
        },
        enumerable: true,
        configurable: true
    });
    IgcLinearGraphRangeComponent.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    };
    Object.defineProperty(IgcLinearGraphRangeComponent.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgcLinearGraphRangeComponent.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgcLinearGraphRangeComponent.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("LinearGraphRangeComponent");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgcLinearGraphRangeComponent._observedAttributesIgcLinearGraphRangeComponent = null;
    IgcLinearGraphRangeComponent.htmlTagName = "igc-linear-graph-range";
    IgcLinearGraphRangeComponent._isElementRegistered = false;
    return IgcLinearGraphRangeComponent;
}(IgcHTMLElement));
export { IgcLinearGraphRangeComponent };
