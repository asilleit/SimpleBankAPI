/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { WebComponentRenderer, WebComponentWrapper } from "igniteui-webcomponents-core";
import { TypeRegistrar } from "igniteui-webcomponents-core";
import { XamBulletGraph } from './XamBulletGraph';
import { CollectionAdapter, brushToString, stringToBrush, toPoint, fromBrushCollection, toBrushCollection, ensureBool, ensureEnum, initializePropertiesFromCss, NamePatcher, enumToString, brushCollectionToString, toSpinal, fromSpinal, getAllPropertyNames, arrayFindByName } from "igniteui-webcomponents-core";
import { IgcDataContext } from "igniteui-webcomponents-core";
import { delegateCombine, delegateRemove } from "igniteui-webcomponents-core";
import { NotifyCollectionChangedAction } from "igniteui-webcomponents-core";
import { BulletGraphStylingDefaults } from './BulletGraphStylingDefaults';
import { LinearScaleOrientation_$type } from './LinearScaleOrientation';
import { IgcFormatLinearGraphLabelEventArgs } from './igc-format-linear-graph-label-event-args';
import { IgcAlignLinearGraphLabelEventArgs } from './igc-align-linear-graph-label-event-args';
import { IgcLinearGraphRangeComponent } from './igc-linear-graph-range-component';
import { IgcLinearGraphRangeCollection } from './igc-linear-graph-range-collection';
import { RegisterElementHelper } from "igniteui-webcomponents-core";
import { IgcHTMLElement } from "igniteui-webcomponents-core";
var IgcBulletGraphComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgcBulletGraphComponent, _super);
    function IgcBulletGraphComponent() {
        var _this = _super.call(this) || this;
        _this.contentRanges = [];
        /**
        * The ranges actually present in the chart. Do not directly modify this array.
        * This array's contents can be modified by causing Angular to reproject the child content.
        * Or adding and removing ranges from the manual ranges collection on the ranges property.
        */
        _this.actualRanges = [];
        _this._ranges = null;
        _this._rangesAdapter = null;
        _this._disconnected = false;
        _this._tooltipTemplate = null;
        _this._tooltipContent = null;
        _this._defaultTooltips = null;
        _this._settingAttributes = false;
        _this._attached = false;
        _this._queuedSetAttributes = [];
        _this._updatingFromAttribute = false;
        _this.__p = null;
        _this._hasUserValues = new Set();
        _this._stylingContainer = null;
        _this._stylingParent = null;
        _this._inStyling = false;
        _this._formatLabel = null;
        _this._formatLabel_wrapped = null;
        _this._alignLabel = null;
        _this._alignLabel_wrapped = null;
        _this._actualMinimumValueChange = null;
        _this._actualMinimumValueChange_wrapped = null;
        _this._actualMaximumValueChange = null;
        _this._actualMaximumValueChange_wrapped = null;
        if (_this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));
        }
        _this._renderer = new WebComponentRenderer(_this, document, true, BulletGraphStylingDefaults);
        _this._implementation = _this.createImplementation();
        _this._container = _this._renderer.createElement("div");
        _this._renderer.updateRoot(_this._container);
        //this._renderer.rootWrapper.append(this._container);
        _this._container.setStyleProperty("display", "block");
        _this._container.setStyleProperty("width", "100%");
        _this._container.setStyleProperty("height", "100%");
        var root;
        root = _this._container;
        if (_this._container.getNativeElement() != null) {
            root = _this._container.getNativeElement();
        }
        _this._wrapper = _this._renderer;
        var gauge = _this.i;
        _this._gauge = gauge;
        _this._rangesAdapter = new CollectionAdapter(_this.contentRanges, _this.i.ranges, _this.actualRanges, function (c) { return c.i; }, function (i) {
            i._provideRenderer(_this._wrapper);
            if (_this.parentElement) {
                i._styling(_this, _this, _this);
            }
        }, function (i) { i._provideRenderer(null); });
        gauge.provideContainer(_this._renderer);
        var mut = new MutationObserver(function (list) {
            var e_1, _b;
            try {
                for (var list_1 = tslib_1.__values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                    var mutation = list_1_1.value;
                    if (mutation.type == 'childList') {
                        _this.updateContentRanges();
                    }
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (list_1_1 && !list_1_1.done && (_b = list_1.return))
                        _b.call(list_1);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
        });
        mut.observe(_this, {
            childList: true
        });
        _this._renderer.addSizeWatcher(function () {
            _this._gauge.containerResized();
        });
        return _this;
    }
    Object.defineProperty(IgcBulletGraphComponent.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            this._height = value;
            this.style.height = value;
            this.containerResized();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            this.style.width = value;
            this.containerResized();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "ranges", {
        /**
         * A collection or manually added axes for the chart.
        */
        get: function () {
            var _this = this;
            if (this._ranges === null) {
                var coll = new IgcLinearGraphRangeCollection();
                var inner = coll._innerColl;
                inner.addListener(function (sender, e) {
                    switch (e.action) {
                        case NotifyCollectionChangedAction.Add:
                            _this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            _this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);
                            break;
                        case NotifyCollectionChangedAction.Replace:
                            _this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);
                            _this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                            break;
                        case NotifyCollectionChangedAction.Reset:
                            _this._rangesAdapter.clearManualItems();
                            break;
                    }
                });
                this._ranges = coll;
            }
            return this._ranges;
        },
        enumerable: true,
        configurable: true
    });
    IgcBulletGraphComponent.prototype.destroy = function () {
        this._wrapper.rootWrapper.unlistenAll();
        this._gauge.destroy();
        this._wrapper.destroy();
    };
    IgcBulletGraphComponent.prototype.updateContentRanges = function () {
        this.contentRanges.length = 0;
        for (var i = 0; i < this.children.length; i++) {
            if (this.children[i] instanceof IgcLinearGraphRangeComponent) {
                this.contentRanges.push(this.children[i]);
            }
        }
        if (this._rangesAdapter != null) {
            this._rangesAdapter.notifyContentChanged();
        }
    };
    IgcBulletGraphComponent.prototype.createImplementation = function () {
        return new XamBulletGraph();
    };
    IgcBulletGraphComponent.prototype.disconnectedCallback = function () {
        this._disconnected = true;
        if (this.i) {
            this.i.onDetachedFromUI();
        }
    };
    IgcBulletGraphComponent.prototype.connectedCallback = function () {
        if (this._disconnected) {
            this._disconnected = false;
            if (this.i) {
                this.i.onAttachedToUI();
            }
            return;
        }
        this.classList.add("ig-bullet-graph");
        this.classList.add("igc-bullet-graph");
        this.appendChild(this._renderer.rootWrapper.getNativeElement());
        this._attached = true;
        this.style.display = "block";
        this.style.height = this._height;
        this.style.width = this._width;
        this._flushQueuedAttributes();
        // supports themes or custom properties set in CSS 
        this._styling(this, this);
        for (var i = 0; i < this.actualRanges.length; i++) {
            var s = this.actualRanges[i];
            s._styling(this, this, this);
        }
        this.updateContentRanges();
        this.afterContentInit();
    };
    IgcBulletGraphComponent.prototype.afterContentInit = function () {
        var _this = this;
        if (TypeRegistrar.isRegistered("IgcSimpleDefaultTooltipComponent")) {
            var cr_1 = TypeRegistrar.create("IgcSimpleDefaultTooltipComponent");
            this._defaultTooltips = cr_1;
            cr_1.onContentReady = function () {
                _this._onDefaultTooltipsReady(cr_1);
            };
            this._ensureTooltipCreated();
        }
        this.i.containerResized();
    };
    Object.defineProperty(IgcBulletGraphComponent.prototype, "tooltipTemplate", {
        get: function () {
            return this._tooltipTemplate;
        },
        set: function (value) {
            this._tooltipTemplate = value;
            if (value == null) {
                if (this._tooltipContent !== null) {
                    if (this._tooltipContent.destroy) {
                        this._tooltipContent.destroy();
                    }
                    this._tooltipContent = null;
                }
            }
            if (this._tooltipContent != null) {
                this._tooltipContent.template = this._tooltipTemplate;
            }
            else {
                this._ensureTooltipCreated();
            }
        },
        enumerable: true,
        configurable: true
    });
    IgcBulletGraphComponent.prototype._ensureTooltipCreated = function () {
        if (this.i.toolTip == null) {
            var tooltip = this.createTooltip();
            if (tooltip == null) {
                return;
            }
            this._tooltipContent = tooltip;
            tooltip.template = this._tooltipTemplate;
            this.i.toolTip = this.createWrapper(tooltip);
        }
    };
    IgcBulletGraphComponent.prototype.createWrapper = function (ele) {
        var wrapper = new WebComponentWrapper(ele, this._renderer);
        wrapper.updateToolTip = ele.updateToolTip;
        wrapper.hideToolTip = ele.hideToolTip;
        return wrapper;
    };
    IgcBulletGraphComponent.prototype._ensureDefaultTooltip = function () {
        if (this._defaultTooltips == null) {
            return;
        }
        this._defaultTooltips["ensureDefaultTooltip"](this);
    };
    IgcBulletGraphComponent.prototype._onDefaultTooltipsReady = function (cr) {
        this._ensureDefaultTooltip();
    };
    IgcBulletGraphComponent.prototype.createTooltip = function () {
        if (!TypeRegistrar.isRegistered("IgcTooltipContainerComponent")) {
            return null;
        }
        var cr = TypeRegistrar.create("IgcTooltipContainerComponent");
        var ele = cr;
        var self = this;
        ele.updateToolTip = function (c) {
            if (c.externalObject) {
                c = c.externalObject;
            }
            else {
                var ext = new IgcDataContext();
                ext._implementation = c;
                c = ext;
            }
            if (ele.parentElement != self._container.getNativeElement()) {
                if (ele.parentElement != null) {
                    ele.parentElement.removeChild(ele);
                }
                self._container.append(this._renderer.createWrapper(ele));
            }
            cr.context = c;
            ele.style.display = "block";
            return true;
        };
        ele.hideToolTip = function () {
            ele.style.display = "none";
        };
        ele.style.display = "none";
        return cr;
    };
    Object.defineProperty(IgcBulletGraphComponent.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: true,
        configurable: true
    });
    IgcBulletGraphComponent._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igc" + name + "Component";
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    IgcBulletGraphComponent.prototype._enqueueSetAttribute = function (attrName, attrValue) {
        this._queuedSetAttributes.push({ attrName: attrName, attrValue: attrValue });
    };
    IgcBulletGraphComponent.prototype._flushQueuedAttributes = function () {
        this._settingAttributes = true;
        for (var i = 0; i < this._queuedSetAttributes.length; i++) {
            this.setAttribute(this._queuedSetAttributes[i].attrName, this._queuedSetAttributes[i].attrValue);
        }
        this._settingAttributes = false;
        this._queuedSetAttributes.length = 0;
    };
    IgcBulletGraphComponent.prototype._a = function (attrName, attrValue) {
        if (this._updatingFromAttribute) {
            return;
        }
        if (attrValue) {
            attrValue = attrValue.toString();
        }
        this._settingAttributes = true;
        attrName = toSpinal(attrName);
        if (this._attached) {
            this.setAttribute(attrName, attrValue);
        }
        else {
            this._enqueueSetAttribute(attrName, attrValue);
        }
        this._settingAttributes = false;
    };
    Object.defineProperty(IgcBulletGraphComponent, "observedAttributes", {
        get: function () {
            if (IgcBulletGraphComponent._observedAttributesIgcBulletGraphComponent == null) {
                var names = getAllPropertyNames(IgcBulletGraphComponent);
                for (var i = 0; i < names.length; i++) {
                    names[i] = toSpinal(names[i]);
                }
                IgcBulletGraphComponent._observedAttributesIgcBulletGraphComponent = names;
            }
            return IgcBulletGraphComponent._observedAttributesIgcBulletGraphComponent;
        },
        enumerable: true,
        configurable: true
    });
    IgcBulletGraphComponent.prototype.attributeChangedCallback = function (name, oldValue, newValue) {
        if (this._settingAttributes) {
            return;
        }
        var setName = fromSpinal(name);
        this._updatingFromAttribute = true;
        this[setName] = newValue;
        this._updatingFromAttribute = false;
    };
    IgcBulletGraphComponent.register = function () {
        if (!IgcBulletGraphComponent._isElementRegistered) {
            IgcBulletGraphComponent._isElementRegistered = true;
            RegisterElementHelper.registerElement(IgcBulletGraphComponent.htmlTagName, IgcBulletGraphComponent);
        }
    };
    Object.defineProperty(IgcBulletGraphComponent.prototype, "animating", {
        /**
     * Gets a value indicating whether the bullet graph is currently animating.
    */
        get: function () {
            return this.i.a2;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "transitionProgress", {
        /**
         * Gets the transition progress of the animation when the control is animating.
        */
        get: function () {
            return this.i.cq;
        },
        set: function (v) {
            this.i.cq = +v;
            this._a("transitionProgress", this.i.cq);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "orientation", {
        /**
         * Gets or sets the orientation of the scale.
        */
        get: function () {
            return this.i.ar;
        },
        set: function (v) {
            this.i.ar = ensureEnum(LinearScaleOrientation_$type, v);
            this._a("orientation", enumToString(LinearScaleOrientation_$type, this.i.ar));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "scaleBackgroundBrush", {
        /**
         * Gets or sets the background brush for the scale.
        */
        get: function () {
            return brushToString(this.i.hj);
        },
        set: function (v) {
            this.i.hj = stringToBrush(v);
            this._a("scaleBackgroundBrush", brushToString(this.i.hj));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "scaleBackgroundOutline", {
        /**
         * Gets or sets the background outline for the scale.
        */
        get: function () {
            return brushToString(this.i.hk);
        },
        set: function (v) {
            this.i.hk = stringToBrush(v);
            this._a("scaleBackgroundOutline", brushToString(this.i.hk));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "scaleBackgroundThickness", {
        /**
         * Gets or sets the background outline thickness for the scale.
        */
        get: function () {
            return this.i.b8;
        },
        set: function (v) {
            this.i.b8 = +v;
            this._a("scaleBackgroundThickness", this.i.b8);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "rangeBrushes", {
        /**
         * Gets or sets a collection of brushes to be used as the palette for bullet graph ranges.
        */
        get: function () {
            return fromBrushCollection(this.i.ah);
        },
        set: function (v) {
            this.i.ah = toBrushCollection(v);
            this._a("rangeBrushes", brushCollectionToString(this.i.ah));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "rangeOutlines", {
        /**
         * Gets or sets a collection of brushes to be used as the palette for bullet graph outlines.
        */
        get: function () {
            return fromBrushCollection(this.i.ai);
        },
        set: function (v) {
            this.i.ai = toBrushCollection(v);
            this._a("rangeOutlines", brushCollectionToString(this.i.ai));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "minimumValue", {
        /**
         * Gets or sets the minimum value of the scale.
        */
        get: function () {
            return this.i.by;
        },
        set: function (v) {
            this.i.by = +v;
            this._a("minimumValue", this.i.by);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "actualMinimumValue", {
        /**
         * Gets the resolved minimum value of the scale.
        */
        get: function () {
            return this.i.bl;
        },
        set: function (v) {
            this.i.bl = +v;
            this._a("actualMinimumValue", this.i.bl);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "maximumValue", {
        /**
         * Gets or sets the maximum value of the scale.
        */
        get: function () {
            return this.i.bx;
        },
        set: function (v) {
            this.i.bx = +v;
            this._a("maximumValue", this.i.bx);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "actualMaximumValue", {
        /**
         * Gets the resolved maximum value of the scale.
        */
        get: function () {
            return this.i.bk;
        },
        set: function (v) {
            this.i.bk = +v;
            this._a("actualMaximumValue", this.i.bk);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "targetValue", {
        /**
         * Gets or sets the value indicated by the target value bar.
        */
        get: function () {
            return this.i.ce;
        },
        set: function (v) {
            this.i.ce = +v;
            this._a("targetValue", this.i.ce);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "targetValueName", {
        /**
         * Gets or sets the name used for the target value. The name is displayed in the default target value tooltip.
        */
        get: function () {
            return this.i.d8;
        },
        set: function (v) {
            this.i.d8 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "value", {
        /**
         * Gets or sets the value at which the bar ends.
        */
        get: function () {
            return this.i.cr;
        },
        set: function (v) {
            this.i.cr = +v;
            this._a("value", this.i.cr);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "valueName", {
        /**
         * Gets or sets the name used for actual value.
        */
        get: function () {
            return this.i.ep;
        },
        set: function (v) {
            this.i.ep = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "rangeInnerExtent", {
        /**
         * Gets or sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
        */
        get: function () {
            return this.i.b6;
        },
        set: function (v) {
            this.i.b6 = +v;
            this._a("rangeInnerExtent", this.i.b6);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "rangeOuterExtent", {
        /**
         * Gets or sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the bullet graph.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
        */
        get: function () {
            return this.i.b7;
        },
        set: function (v) {
            this.i.b7 = +v;
            this._a("rangeOuterExtent", this.i.b7);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "valueInnerExtent", {
        /**
         * Gets or sets the position at which to start rendering the actual value geometries, measured from the front/bottom of the bullet graph as a value from 0 to 1.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
        */
        get: function () {
            return this.i.cs;
        },
        set: function (v) {
            this.i.cs = +v;
            this._a("valueInnerExtent", this.i.cs);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "valueOuterExtent", {
        /**
         * Gets or sets the position at which to stop rendering the actual value geometries as a value from 0 to 1 measured from the front/bottom of the bullet graph.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
        */
        get: function () {
            return this.i.ct;
        },
        set: function (v) {
            this.i.ct = +v;
            this._a("valueOuterExtent", this.i.ct);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "interval", {
        /**
         * Gets or sets the interval to use for the scale.
        */
        get: function () {
            return this.i.bs;
        },
        set: function (v) {
            this.i.bs = +v;
            this._a("interval", this.i.bs);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "ticksPostInitial", {
        /**
         * A value to start adding tickmarks, added to the scale's MinimumValue.
        */
        get: function () {
            return this.i.cl;
        },
        set: function (v) {
            this.i.cl = +v;
            this._a("ticksPostInitial", this.i.cl);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "ticksPreTerminal", {
        /**
         * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
        */
        get: function () {
            return this.i.cm;
        },
        set: function (v) {
            this.i.cm = +v;
            this._a("ticksPreTerminal", this.i.cm);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "labelInterval", {
        /**
         * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
        */
        get: function () {
            return this.i.bu;
        },
        set: function (v) {
            this.i.bu = +v;
            this._a("labelInterval", this.i.bu);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "labelExtent", {
        /**
         * Gets or sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
         * Values further from zero than 1 can be used to hide the labels of the bullet graph.
        */
        get: function () {
            return this.i.bt;
        },
        set: function (v) {
            this.i.bt = +v;
            this._a("labelExtent", this.i.bt);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "labelsPostInitial", {
        /**
         * A value to start adding labels, added to the scale's MinimumValue.
        */
        get: function () {
            return this.i.bv;
        },
        set: function (v) {
            this.i.bv = +v;
            this._a("labelsPostInitial", this.i.bv);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "labelsPreTerminal", {
        /**
         * A value to stop adding labels, subtracted from the scale's MaximumValue.
        */
        get: function () {
            return this.i.bw;
        },
        set: function (v) {
            this.i.bw = +v;
            this._a("labelsPreTerminal", this.i.bw);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "minorTickCount", {
        /**
         * Gets or sets the number of minor tickmarks to place between major tickmarks.
        */
        get: function () {
            return this.i.bz;
        },
        set: function (v) {
            this.i.bz = +v;
            this._a("minorTickCount", this.i.bz);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "tickStartExtent", {
        /**
         * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
        */
        get: function () {
            return this.i.cn;
        },
        set: function (v) {
            this.i.cn = +v;
            this._a("tickStartExtent", this.i.cn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "tickEndExtent", {
        /**
         * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
        */
        get: function () {
            return this.i.cj;
        },
        set: function (v) {
            this.i.cj = +v;
            this._a("tickEndExtent", this.i.cj);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "tickStrokeThickness", {
        /**
         * Gets or sets the stroke thickness to use when rendering ticks.
        */
        get: function () {
            return this.i.cp;
        },
        set: function (v) {
            this.i.cp = +v;
            this._a("tickStrokeThickness", this.i.cp);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "tickBrush", {
        /**
         * Gets or sets the brush to use for the major tickmarks.
        */
        get: function () {
            return brushToString(this.i.hn);
        },
        set: function (v) {
            this.i.hn = stringToBrush(v);
            this._a("tickBrush", brushToString(this.i.hn));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "fontBrush", {
        /**
         * Gets or sets the brush to use for the label font.
        */
        get: function () {
            return brushToString(this.i.hg);
        },
        set: function (v) {
            this.i.hg = stringToBrush(v);
            this._a("fontBrush", brushToString(this.i.hg));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "valueBrush", {
        /**
         * Gets or sets the brush to use for the actual value element.
        */
        get: function () {
            return brushToString(this.i.ho);
        },
        set: function (v) {
            this.i.ho = stringToBrush(v);
            this._a("valueBrush", brushToString(this.i.ho));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "valueOutline", {
        /**
         * Gets or sets the brush to use for the outline of actual value element.
        */
        get: function () {
            return brushToString(this.i.hp);
        },
        set: function (v) {
            this.i.hp = stringToBrush(v);
            this._a("valueOutline", brushToString(this.i.hp));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "valueStrokeThickness", {
        /**
         * Gets or sets the stroke thickness to use when rendering single actual value element.
        */
        get: function () {
            return this.i.cu;
        },
        set: function (v) {
            this.i.cu = +v;
            this._a("valueStrokeThickness", this.i.cu);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "minorTickStartExtent", {
        /**
         * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
        */
        get: function () {
            return this.i.b2;
        },
        set: function (v) {
            this.i.b2 = +v;
            this._a("minorTickStartExtent", this.i.b2);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "minorTickEndExtent", {
        /**
         * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the bullet graph.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
        */
        get: function () {
            return this.i.b0;
        },
        set: function (v) {
            this.i.b0 = +v;
            this._a("minorTickEndExtent", this.i.b0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "minorTickStrokeThickness", {
        /**
         * Gets or sets the stroke thickness to use when rendering minor ticks.
        */
        get: function () {
            return this.i.b4;
        },
        set: function (v) {
            this.i.b4 = +v;
            this._a("minorTickStrokeThickness", this.i.b4);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "minorTickBrush", {
        /**
         * Gets or sets the brush to use for the minor tickmarks.
        */
        get: function () {
            return brushToString(this.i.hi);
        },
        set: function (v) {
            this.i.hi = stringToBrush(v);
            this._a("minorTickBrush", brushToString(this.i.hi));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "isScaleInverted", {
        /**
         * Gets or sets a value indicating whether the scale is inverted.
         * When the scale is inverted the direction in which the scale values increase is right to left.
        */
        get: function () {
            return this.i.a4;
        },
        set: function (v) {
            this.i.a4 = ensureBool(v);
            this._a("isScaleInverted", this.i.a4);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "backingBrush", {
        /**
         * Gets or sets the brush to use to fill the backing of the bullet graph.
        */
        get: function () {
            return brushToString(this.i.he);
        },
        set: function (v) {
            this.i.he = stringToBrush(v);
            this._a("backingBrush", brushToString(this.i.he));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "backingOutline", {
        /**
         * Gets or sets the brush to use for the outline of the backing.
        */
        get: function () {
            return brushToString(this.i.hf);
        },
        set: function (v) {
            this.i.hf = stringToBrush(v);
            this._a("backingOutline", brushToString(this.i.hf));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "backingStrokeThickness", {
        /**
         * Gets or sets the stroke thickness of the backing outline.
        */
        get: function () {
            return this.i.bp;
        },
        set: function (v) {
            this.i.bp = +v;
            this._a("backingStrokeThickness", this.i.bp);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "backingInnerExtent", {
        /**
         * Gets or sets the inner extent of the bullet graph backing.
        */
        get: function () {
            return this.i.bn;
        },
        set: function (v) {
            this.i.bn = +v;
            this._a("backingInnerExtent", this.i.bn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "backingOuterExtent", {
        /**
         * Gets or sets the outer extent of the bullet graph backing.
        */
        get: function () {
            return this.i.bo;
        },
        set: function (v) {
            this.i.bo = +v;
            this._a("backingOuterExtent", this.i.bo);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "scaleStartExtent", {
        /**
         * Gets or sets the position at which to start rendering the scale, measured from the front/bottom of the bullet graph as a value from 0 to 1.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
        */
        get: function () {
            return this.i.cd;
        },
        set: function (v) {
            this.i.cd = +v;
            this._a("scaleStartExtent", this.i.cd);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "scaleEndExtent", {
        /**
         * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the bullet graph.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
        */
        get: function () {
            return this.i.ca;
        },
        set: function (v) {
            this.i.ca = +v;
            this._a("scaleEndExtent", this.i.ca);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "targetValueBrush", {
        /**
         * Gets or sets the brush to use when rendering the fill of the comparative marker.
        */
        get: function () {
            return brushToString(this.i.hl);
        },
        set: function (v) {
            this.i.hl = stringToBrush(v);
            this._a("targetValueBrush", brushToString(this.i.hl));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "targetValueBreadth", {
        /**
         * Get or sets the breadth of the target value element.
        */
        get: function () {
            return this.i.cf;
        },
        set: function (v) {
            this.i.cf = +v;
            this._a("targetValueBreadth", this.i.cf);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "targetValueInnerExtent", {
        /**
         * Gets or sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
        */
        get: function () {
            return this.i.cg;
        },
        set: function (v) {
            this.i.cg = +v;
            this._a("targetValueInnerExtent", this.i.cg);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "targetValueOuterExtent", {
        /**
         * Gets or sets the position at which to start rendering the target value, measured from the front/bottom of the control as a value from 0 to 1.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the bullet graph.
        */
        get: function () {
            return this.i.ch;
        },
        set: function (v) {
            this.i.ch = +v;
            this._a("targetValueOuterExtent", this.i.ch);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "targetValueOutline", {
        /**
         * Gets or sets the brush to use when rendering the outline of the target value.
        */
        get: function () {
            return brushToString(this.i.hm);
        },
        set: function (v) {
            this.i.hm = stringToBrush(v);
            this._a("targetValueOutline", brushToString(this.i.hm));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "targetValueStrokeThickness", {
        /**
         * Gets or sets the stroke thickness of the outline of the target value bar.
        */
        get: function () {
            return this.i.ci;
        },
        set: function (v) {
            this.i.ci = +v;
            this._a("targetValueStrokeThickness", this.i.ci);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "labelFormat", {
        /**
         * Gets or sets the label composite format used when creating label values.
        */
        get: function () {
            return this.i.dd;
        },
        set: function (v) {
            this.i.dd = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "labelFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the LabelFormat string.
        */
        get: function () {
            return this.i.ag;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.ag = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "transitionDuration", {
        /**
         * Gets or sets the number of milliseconds over which changes to the bullet graph should be animated.
        */
        get: function () {
            return this.i.cy;
        },
        set: function (v) {
            this.i.cy = +v;
            this._a("transitionDuration", this.i.cy);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "showToolTipTimeout", {
        /**
         * Gets or sets the time in milliseconds that tooltip appearance is delayed with.
        */
        get: function () {
            return this.i.cx;
        },
        set: function (v) {
            this.i.cx = +v;
            this._a("showToolTipTimeout", this.i.cx);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "showToolTip", {
        /**
         * Gets or sets a value indicating whether tooltips are enabled.
        */
        get: function () {
            return this.i.a8;
        },
        set: function (v) {
            this.i.a8 = ensureBool(v);
            this._a("showToolTip", this.i.a8);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "font", {
        /**
         * Gets or sets the font.
        */
        get: function () {
            return this.i.c7;
        },
        set: function (v) {
            this.i.c7 = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "pixelScalingRatio", {
        /**
         * Gets or sets the scaling value used to affect the pixel density of the control.
         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
         * to appear blurry.
        */
        get: function () {
            return this.i.b5;
        },
        set: function (v) {
            this.i.b5 = +v;
            this._a("pixelScalingRatio", this.i.b5);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "actualPixelScalingRatio", {
        /**
         * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
         * to appear blurry.
        */
        get: function () {
            return this.i.bm;
        },
        set: function (v) {
            this.i.bm = +v;
            this._a("actualPixelScalingRatio", this.i.bm);
        },
        enumerable: true,
        configurable: true
    });
    IgcBulletGraphComponent.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.ranges != null && this.ranges.findByName && this.ranges.findByName(name)) {
            return this.ranges.findByName(name);
        }
        if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {
            return arrayFindByName(this.labelFormatSpecifiers, name);
        }
        return null;
    };
    Object.defineProperty(IgcBulletGraphComponent.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: true,
        configurable: true
    });
    IgcBulletGraphComponent.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgcBulletGraphComponent.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("BulletGraphComponent");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    /**
 * Gets the value for the main scale of the bullet graph for a given point within the bounds of the bullet graph.

* @param point  * The point for which to retrieve the associated value.
*/
    IgcBulletGraphComponent.prototype.getValueForPoint = function (point) {
        var iv = this.i.br(toPoint(point));
        return (iv);
    };
    /**
     * Returns visuals as a serialized string.
    
    */
    IgcBulletGraphComponent.prototype.exportSerializedVisualData = function () {
        var iv = this.i.c6();
        return (iv);
    };
    /**
     * Provide a container for the bullet graph.
    
    * @param container  * The container.
    */
    IgcBulletGraphComponent.prototype.provideContainer = function (container) {
        this.i.provideContainer(container);
    };
    /**
     * Notify that the container has resized.
    
    */
    IgcBulletGraphComponent.prototype.containerResized = function () {
        this.i.containerResized();
    };
    /**
     * Notify that the bullet graph styling has updated.
    
    */
    IgcBulletGraphComponent.prototype.styleUpdated = function () {
        this.i.fr();
    };
    /**
     * Use to force the bullet graph to finish any deferred work before printing or evaluating its visual.
     * This should only be called if the visual of the bullet graph needs to be synchronously saved or evaluated.
     * Calling this method too often will hinder the performance of the bullet graph.
    
    */
    IgcBulletGraphComponent.prototype.flush = function () {
        this.i.ez();
    };
    Object.defineProperty(IgcBulletGraphComponent.prototype, "formatLabel", {
        /**
         * Event which is raised when a label of the bullet graph is formatted.
         * Function takes first argument evt and second argument ui.
         * Use ui.owner to obtain reference to the bullet graph widget.
         * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
         * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
         * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
         * Use ui.label to obtain the string value of the label.
        */
        get: function () {
            return this._formatLabel;
        },
        set: function (ev) {
            var _this = this;
            if (this._formatLabel_wrapped !== null) {
                this.i.formatLabel = delegateRemove(this.i.formatLabel, this._formatLabel_wrapped);
                this._formatLabel_wrapped = null;
                this._formatLabel = null;
            }
            this._formatLabel = ev;
            this._formatLabel_wrapped = function (o, e) {
                var outerArgs = new IgcFormatLinearGraphLabelEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeFormatLabel) {
                    _this.beforeFormatLabel(_this, outerArgs);
                }
                if (_this._formatLabel) {
                    _this._formatLabel(_this, outerArgs);
                }
            };
            this.i.formatLabel = delegateCombine(this.i.formatLabel, this._formatLabel_wrapped);
            ;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "alignLabel", {
        /**
         * Event which is raised when a label of the bullet graph is aligned along the scale.
         * Function takes first argument evt and second argument ui.
         * Use ui.owner to obtain reference to gauge widget.
         * Use ui.actualMinimumValue to obtain the minimum value of the bullet graph scale.
         * Use ui.actualMaximumValue to obtain the maximum value of the bullet graph scale.
         * Use ui.value to obtain the value on the the bullet graph scale associated with the label.
         * Use ui.label to obtain the string value of the label.
         * Use ui.width to obtain the width of the label.
         * Use ui.height to obtain the height of the label.
         * Use ui.offsetX to obtain the X offset of the label on the bullet graph scale.
         * Use ui.offsetY to obtain the Y offset of the label on the bullet graph scale.
        */
        get: function () {
            return this._alignLabel;
        },
        set: function (ev) {
            var _this = this;
            if (this._alignLabel_wrapped !== null) {
                this.i.alignLabel = delegateRemove(this.i.alignLabel, this._alignLabel_wrapped);
                this._alignLabel_wrapped = null;
                this._alignLabel = null;
            }
            this._alignLabel = ev;
            this._alignLabel_wrapped = function (o, e) {
                var outerArgs = new IgcAlignLinearGraphLabelEventArgs();
                outerArgs._provideImplementation(e);
                if (_this.beforeAlignLabel) {
                    _this.beforeAlignLabel(_this, outerArgs);
                }
                if (_this._alignLabel) {
                    _this._alignLabel(_this, outerArgs);
                }
            };
            this.i.alignLabel = delegateCombine(this.i.alignLabel, this._alignLabel_wrapped);
            ;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "actualMinimumValueChange", {
        get: function () {
            return this._actualMinimumValueChange;
        },
        set: function (ev) {
            var _this = this;
            if (this._actualMinimumValueChange_wrapped !== null) {
                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);
                this._actualMinimumValueChange_wrapped = null;
                this._actualMinimumValueChange = null;
            }
            this._actualMinimumValueChange = ev;
            this._actualMinimumValueChange_wrapped = function (o, e) {
                var ext = _this.actualMinimumValue;
                if (e.propertyName == 'Bl') {
                    if (_this.beforeActualMinimumValueChange) {
                        _this.beforeActualMinimumValueChange(_this, ext);
                    }
                    if (_this._actualMinimumValueChange) {
                        _this._actualMinimumValueChange(_this, ext);
                    }
                }
            };
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcBulletGraphComponent.prototype, "actualMaximumValueChange", {
        get: function () {
            return this._actualMaximumValueChange;
        },
        set: function (ev) {
            var _this = this;
            if (this._actualMaximumValueChange_wrapped !== null) {
                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);
                this._actualMaximumValueChange_wrapped = null;
                this._actualMaximumValueChange = null;
            }
            this._actualMaximumValueChange = ev;
            this._actualMaximumValueChange_wrapped = function (o, e) {
                var ext = _this.actualMaximumValue;
                if (e.propertyName == 'Bk') {
                    if (_this.beforeActualMaximumValueChange) {
                        _this.beforeActualMaximumValueChange(_this, ext);
                    }
                    if (_this._actualMaximumValueChange) {
                        _this._actualMaximumValueChange(_this, ext);
                    }
                }
            };
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);
        },
        enumerable: true,
        configurable: true
    });
    IgcBulletGraphComponent._observedAttributesIgcBulletGraphComponent = null;
    IgcBulletGraphComponent.htmlTagName = "igc-bullet-graph";
    IgcBulletGraphComponent._isElementRegistered = false;
    return IgcBulletGraphComponent;
}(IgcHTMLElement));
export { IgcBulletGraphComponent };
