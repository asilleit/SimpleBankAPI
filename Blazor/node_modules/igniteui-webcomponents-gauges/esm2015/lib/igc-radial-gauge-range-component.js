import { TypeRegistrar } from "igniteui-webcomponents-core";
import { brushToString, stringToBrush, toSpinal, fromSpinal, getAllPropertyNames, initializePropertiesFromCss, NamePatcher } from "igniteui-webcomponents-core";
import { XamRadialGaugeRange } from "./XamRadialGaugeRange";
import { RegisterElementHelper } from "igniteui-webcomponents-core";
import { IgcHTMLElement } from "igniteui-webcomponents-core";
export let IgcRadialGaugeRangeComponent = /*@__PURE__*/ (() => {
    class IgcRadialGaugeRangeComponent extends IgcHTMLElement {
        constructor() {
            super();
            this._renderer = null;
            this._settingAttributes = false;
            this._attached = false;
            this._queuedSetAttributes = [];
            this._updatingFromAttribute = false;
            this.__p = null;
            this._hasUserValues = new Set();
            this._stylingContainer = null;
            this._stylingParent = null;
            this._inStyling = false;
            if (this._styling) {
                NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
            }
            this._implementation = this.createImplementation();
            this._implementation.externalObject = this;
            this.onImplementationCreated();
        }
        get i() {
            return this._implementation;
        }
        onImplementationCreated() {
        }
        get rangeInternal() {
            return this.i;
        }
        createImplementation() {
            return new XamRadialGaugeRange();
        }
        _provideRenderer(renderer) {
            this._renderer = renderer;
        }
        static _createFromInternal(internal) {
            if (!internal) {
                return null;
            }
            if (!internal.$type) {
                return null;
            }
            let name = internal.$type.name;
            let externalName = "Igc" + name + "Component";
            if (!TypeRegistrar.isRegistered(externalName)) {
                return null;
            }
            return TypeRegistrar.create(externalName);
        }
        _enqueueSetAttribute(attrName, attrValue) {
            this._queuedSetAttributes.push({ attrName: attrName, attrValue: attrValue });
        }
        _flushQueuedAttributes() {
            this._settingAttributes = true;
            for (let i = 0; i < this._queuedSetAttributes.length; i++) {
                this.setAttribute(this._queuedSetAttributes[i].attrName, this._queuedSetAttributes[i].attrValue);
            }
            this._settingAttributes = false;
            this._queuedSetAttributes.length = 0;
        }
        _a(attrName, attrValue) {
            if (this._updatingFromAttribute) {
                return;
            }
            if (attrValue) {
                attrValue = attrValue.toString();
            }
            this._settingAttributes = true;
            attrName = toSpinal(attrName);
            if (this._attached) {
                this.setAttribute(attrName, attrValue);
            }
            else {
                this._enqueueSetAttribute(attrName, attrValue);
            }
            this._settingAttributes = false;
        }
        connectedCallback() {
            if (super["connectedCallback"]) {
                super["connectedCallback"]();
            }
            if (this.i.connectedCallback) {
                this.i.connectedCallback();
            }
            if (!this._attached) {
                this._attached = true;
                this._flushQueuedAttributes();
            }
        }
        disconnectedCallback() {
            if (super["disconnectedCallback"]) {
                super["disconnectedCallback"]();
            }
            if (this.i.disconnectedCallback) {
                this.i.disconnectedCallback();
            }
            if (this._attached) {
                this._attached = false;
            }
        }
        static get observedAttributes() {
            if (IgcRadialGaugeRangeComponent._observedAttributesIgcRadialGaugeRangeComponent == null) {
                let names = getAllPropertyNames(IgcRadialGaugeRangeComponent);
                for (let i = 0; i < names.length; i++) {
                    names[i] = toSpinal(names[i]);
                }
                IgcRadialGaugeRangeComponent._observedAttributesIgcRadialGaugeRangeComponent = names;
            }
            return IgcRadialGaugeRangeComponent._observedAttributesIgcRadialGaugeRangeComponent;
        }
        attributeChangedCallback(name, oldValue, newValue) {
            if (this._settingAttributes) {
                return;
            }
            let setName = fromSpinal(name);
            this._updatingFromAttribute = true;
            this[setName] = newValue;
            this._updatingFromAttribute = false;
        }
        static register() {
            if (!IgcRadialGaugeRangeComponent._isElementRegistered) {
                IgcRadialGaugeRangeComponent._isElementRegistered = true;
                RegisterElementHelper.registerElement(IgcRadialGaugeRangeComponent.htmlTagName, IgcRadialGaugeRangeComponent);
            }
        }
        /**
     * Gets or sets the name of the range.
    */
        get name() {
            return this.i.v;
        }
        set name(v) {
            this.i.v = v;
        }
        /**
         * Gets or sets the brush to use to fill the range.
        */
        get brush() {
            return brushToString(this.i.ao);
        }
        set brush(v) {
            this.i.ao = stringToBrush(v);
            this._a("brush", brushToString(this.i.ao));
        }
        /**
         * Gets or sets the outline to use when rendering the range.
        */
        get outline() {
            return brushToString(this.i.ap);
        }
        set outline(v) {
            this.i.ap = stringToBrush(v);
            this._a("outline", brushToString(this.i.ap));
        }
        /**
         * Gets or sets the value at which the range starts along the scale.
        */
        get startValue() {
            return this.i.o;
        }
        set startValue(v) {
            this.i.o = +v;
            this._a("startValue", this.i.o);
        }
        /**
         * Gets or sets the value at which the range ends along the scale.
        */
        get endValue() {
            return this.i.j;
        }
        set endValue(v) {
            this.i.j = +v;
            this._a("endValue", this.i.j);
        }
        /**
         * Gets or sets the distance from the center of the gauge (from 0 to 1) at which to start rendering the inner sweep of the range.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get innerStartExtent() {
            return this.i.l;
        }
        set innerStartExtent(v) {
            this.i.l = +v;
            this._a("innerStartExtent", this.i.l);
        }
        /**
         * Gets or sets the distance from the center of the gauge (from 0 to 1) at which to end rendering the inner sweep of the range.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get innerEndExtent() {
            return this.i.k;
        }
        set innerEndExtent(v) {
            this.i.k = +v;
            this._a("innerEndExtent", this.i.k);
        }
        /**
         * Gets or sets the distance from the center of the gauge (from 0 to 1) at which to start rendering the outer sweep of the range.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get outerStartExtent() {
            return this.i.n;
        }
        set outerStartExtent(v) {
            this.i.n = +v;
            this._a("outerStartExtent", this.i.n);
        }
        /**
         * Gets or sets the distance from the center of the gauge (from 0 to 1) at which to end rendering the outer sweep of the range.
         * Values further from zero than 1 can be used to make this extend further than the normal radius of the gauge.
        */
        get outerEndExtent() {
            return this.i.m;
        }
        set outerEndExtent(v) {
            this.i.m = +v;
            this._a("outerEndExtent", this.i.m);
        }
        /**
         * Gets or sets the stroke thickness to use when rendering this range's outline.
        */
        get strokeThickness() {
            return this.i.p;
        }
        set strokeThickness(v) {
            this.i.p = +v;
            this._a("strokeThickness", this.i.p);
        }
        findByName(name) {
            if (this.findEphemera) {
                if (name && name.indexOf("@@e:") == 0) {
                    return this.findEphemera(name);
                }
            }
            return null;
        }
        get hasUserValues() {
            return this._hasUserValues;
        }
        __m(propertyName) {
            if (!this._inStyling) {
                this._hasUserValues.add(propertyName);
            }
        }
        _styling(container, component, parent) {
            if (this._inStyling) {
                return;
            }
            this._inStyling = true;
            this._stylingContainer = container;
            this._stylingParent = component;
            let genericPrefix = "";
            let typeName = this.i.$type.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            genericPrefix = toSpinal("RadialGaugeRangeComponent");
            let additionalPrefixes = [];
            let prefix = toSpinal(typeName);
            additionalPrefixes.push(prefix + "-");
            let b = this.i.$type.baseType;
            while (b && b.name != "Object" &&
                b.name != "Base" &&
                b.name != "Control" &&
                b.Name != "DependencyObject" &&
                b.Name != "FrameworkElement") {
                typeName = b.name;
                if (typeName.indexOf("Xam") === 0) {
                    typeName = typeName.substring(3);
                }
                let basePrefix = toSpinal(typeName);
                additionalPrefixes.push(basePrefix + "-");
                b = b.baseType;
            }
            if (parent) {
                let parentTypeName = parent.i.$type.name;
                if (parentTypeName.indexOf("Xam") === 0) {
                    parentTypeName = parentTypeName.substring(3);
                }
                let parentPrefix = toSpinal(parentTypeName);
                additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
                additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
            }
            initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
            if (this._otherStyling) {
                this._otherStyling(container, component, parent);
            }
            this._inStyling = false;
        }
    }
    IgcRadialGaugeRangeComponent._observedAttributesIgcRadialGaugeRangeComponent = null;
    IgcRadialGaugeRangeComponent.htmlTagName = "igc-radial-gauge-range";
    IgcRadialGaugeRangeComponent._isElementRegistered = false;
    return IgcRadialGaugeRangeComponent;
})();
