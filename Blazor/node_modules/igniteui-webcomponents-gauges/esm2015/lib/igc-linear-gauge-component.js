/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { WebComponentRenderer, WebComponentWrapper } from "igniteui-webcomponents-core";
import { TypeRegistrar } from "igniteui-webcomponents-core";
import { XamLinearGauge } from './XamLinearGauge';
import { CollectionAdapter, brushToString, stringToBrush, toPoint, fromBrushCollection, toBrushCollection, ensureBool, ensureEnum, initializePropertiesFromCss, NamePatcher, toSpinal, fromSpinal, getAllPropertyNames, enumToString, brushCollectionToString, arrayFindByName } from "igniteui-webcomponents-core";
import { IgcDataContext } from "igniteui-webcomponents-core";
import { delegateCombine, delegateRemove } from "igniteui-webcomponents-core";
import { NotifyCollectionChangedAction } from "igniteui-webcomponents-core";
import { LinearGaugeStylingDefaults } from './LinearGaugeStylingDefaults';
import { LinearScaleOrientation_$type } from './LinearScaleOrientation';
import { LinearGraphNeedleShape_$type } from './LinearGraphNeedleShape';
import { IgcFormatLinearGraphLabelEventArgs } from './igc-format-linear-graph-label-event-args';
import { IgcAlignLinearGraphLabelEventArgs } from './igc-align-linear-graph-label-event-args';
import { IgcLinearGraphRangeComponent } from './igc-linear-graph-range-component';
import { IgcLinearGraphRangeCollection } from './igc-linear-graph-range-collection';
import { RegisterElementHelper } from "igniteui-webcomponents-core";
import { IgcDoubleValueChangedEventArgs } from "igniteui-webcomponents-core";
import { IgcHTMLElement } from "igniteui-webcomponents-core";
export let IgcLinearGaugeComponent = /*@__PURE__*/ (() => {
    class IgcLinearGaugeComponent extends IgcHTMLElement {
        constructor() {
            super();
            this.contentRanges = [];
            /**
            * The ranges actually present in the chart. Do not directly modify this array.
            * This array's contents can be modified by causing Angular to reproject the child content.
            * Or adding and removing ranges from the manual ranges collection on the ranges property.
            */
            this.actualRanges = [];
            this._ranges = null;
            this._rangesAdapter = null;
            this._disconnected = false;
            this._tooltipTemplate = null;
            this._tooltipContent = null;
            this._defaultTooltips = null;
            this._settingAttributes = false;
            this._attached = false;
            this._queuedSetAttributes = [];
            this._updatingFromAttribute = false;
            this.__p = null;
            this._hasUserValues = new Set();
            this._stylingContainer = null;
            this._stylingParent = null;
            this._inStyling = false;
            this._formatLabel = null;
            this._formatLabel_wrapped = null;
            this._alignLabel = null;
            this._alignLabel_wrapped = null;
            this._valueChanged = null;
            this._valueChanged_wrapped = null;
            this._actualMinimumValueChange = null;
            this._actualMinimumValueChange_wrapped = null;
            this._actualMaximumValueChange = null;
            this._actualMaximumValueChange_wrapped = null;
            if (this._styling) {
                NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
            }
            this._renderer = new WebComponentRenderer(this, document, true, LinearGaugeStylingDefaults);
            this._implementation = this.createImplementation();
            this._container = this._renderer.createElement("div");
            this._renderer.updateRoot(this._container);
            //this._renderer.rootWrapper.append(this._container);
            //this._renderer.rootWrapper.append(this._container);
            this._container.setStyleProperty("display", "block");
            this._container.setStyleProperty("width", "100%");
            this._container.setStyleProperty("height", "100%");
            var root;
            root = this._container;
            if (this._container.getNativeElement() != null) {
                root = this._container.getNativeElement();
            }
            this._wrapper = this._renderer;
            var gauge = this.i;
            this._gauge = gauge;
            this._rangesAdapter = new CollectionAdapter(this.contentRanges, this.i.ranges, this.actualRanges, (c) => c.i, (i) => {
                i._provideRenderer(this._wrapper);
                if (this.parentElement) {
                    i._styling(this, this, this);
                }
            }, (i) => { i._provideRenderer(null); });
            gauge.provideContainer(this._renderer);
            let mut = new MutationObserver((list) => {
                for (var mutation of list) {
                    if (mutation.type == 'childList') {
                        this.updateContentRanges();
                    }
                }
            });
            mut.observe(this, {
                childList: true
            });
            this._renderer.addSizeWatcher(() => {
                this._gauge.containerResized();
            });
        }
        set height(value) {
            this._height = value;
            this.style.height = value;
            this.containerResized();
        }
        get height() {
            return this._height;
        }
        set width(value) {
            this._width = value;
            this.style.width = value;
            this.containerResized();
        }
        get width() {
            return this._width;
        }
        /**
         * A collection or manually added axes for the chart.
        */
        get ranges() {
            if (this._ranges === null) {
                let coll = new IgcLinearGraphRangeCollection();
                let inner = coll._innerColl;
                inner.addListener((sender, e) => {
                    switch (e.action) {
                        case NotifyCollectionChangedAction.Add:
                            this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                            break;
                        case NotifyCollectionChangedAction.Remove:
                            this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);
                            break;
                        case NotifyCollectionChangedAction.Replace:
                            this._rangesAdapter.removeManualItemAt(e.oldStartingIndex);
                            this._rangesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));
                            break;
                        case NotifyCollectionChangedAction.Reset:
                            this._rangesAdapter.clearManualItems();
                            break;
                    }
                });
                this._ranges = coll;
            }
            return this._ranges;
        }
        destroy() {
            this._wrapper.rootWrapper.unlistenAll();
            this._gauge.destroy();
            this._wrapper.destroy();
        }
        updateContentRanges() {
            this.contentRanges.length = 0;
            for (var i = 0; i < this.children.length; i++) {
                if (this.children[i] instanceof IgcLinearGraphRangeComponent) {
                    this.contentRanges.push(this.children[i]);
                }
            }
            if (this._rangesAdapter != null) {
                this._rangesAdapter.notifyContentChanged();
            }
        }
        createImplementation() {
            return new XamLinearGauge();
        }
        disconnectedCallback() {
            this._disconnected = true;
            if (this.i) {
                this.i.onDetachedFromUI();
            }
        }
        connectedCallback() {
            if (this._disconnected) {
                this._disconnected = false;
                if (this.i) {
                    this.i.onAttachedToUI();
                }
                return;
            }
            this.classList.add("ig-linear-gauge");
            this.classList.add("igc-linear-gauge");
            this.appendChild(this._renderer.rootWrapper.getNativeElement());
            this._attached = true;
            this.style.display = "block";
            this.style.height = this._height;
            this.style.width = this._width;
            this._flushQueuedAttributes();
            // supports themes or custom properties set in CSS 
            this._styling(this, this);
            for (let i = 0; i < this.actualRanges.length; i++) {
                let s = this.actualRanges[i];
                s._styling(this, this, this);
            }
            this.updateContentRanges();
            this.afterContentInit();
        }
        afterContentInit() {
            if (TypeRegistrar.isRegistered("IgcSimpleDefaultTooltipComponent")) {
                let cr = TypeRegistrar.create("IgcSimpleDefaultTooltipComponent");
                this._defaultTooltips = cr;
                cr.onContentReady = () => {
                    this._onDefaultTooltipsReady(cr);
                };
                this._ensureTooltipCreated();
            }
            this.i.containerResized();
        }
        set tooltipTemplate(value) {
            this._tooltipTemplate = value;
            if (value == null) {
                if (this._tooltipContent !== null) {
                    if (this._tooltipContent.destroy) {
                        this._tooltipContent.destroy();
                    }
                    this._tooltipContent = null;
                }
            }
            if (this._tooltipContent != null) {
                this._tooltipContent.template = this._tooltipTemplate;
            }
            else {
                this._ensureTooltipCreated();
            }
        }
        get tooltipTemplate() {
            return this._tooltipTemplate;
        }
        _ensureTooltipCreated() {
            if (this.i.toolTip == null) {
                let tooltip = this.createTooltip();
                if (tooltip == null) {
                    return;
                }
                this._tooltipContent = tooltip;
                tooltip.template = this._tooltipTemplate;
                this.i.toolTip = this.createWrapper(tooltip);
            }
        }
        createWrapper(ele) {
            let wrapper = new WebComponentWrapper(ele, this._renderer);
            wrapper.updateToolTip = ele.updateToolTip;
            wrapper.hideToolTip = ele.hideToolTip;
            return wrapper;
        }
        _ensureDefaultTooltip() {
            if (this._defaultTooltips == null) {
                return;
            }
            this._defaultTooltips["ensureDefaultTooltip"](this);
        }
        _onDefaultTooltipsReady(cr) {
            this._ensureDefaultTooltip();
        }
        createTooltip() {
            if (!TypeRegistrar.isRegistered("IgcTooltipContainerComponent")) {
                return null;
            }
            let cr = TypeRegistrar.create("IgcTooltipContainerComponent");
            let ele = cr;
            let self = this;
            ele.updateToolTip = function (c) {
                if (c.externalObject) {
                    c = c.externalObject;
                }
                else {
                    let ext = new IgcDataContext();
                    ext._implementation = c;
                    c = ext;
                }
                if (ele.parentElement != self._container.getNativeElement()) {
                    if (ele.parentElement != null) {
                        ele.parentElement.removeChild(ele);
                    }
                    self._container.append(this._renderer.createWrapper(ele));
                }
                cr.context = c;
                ele.style.display = "block";
                return true;
            };
            ele.hideToolTip = function () {
                ele.style.display = "none";
            };
            ele.style.display = "none";
            return cr;
        }
        /**
         * @hidden
         */
        get i() {
            return this._implementation;
        } /**
                                     * @hidden
                                     */
        static _createFromInternal(internal) {
            if (!internal) {
                return null;
            }
            if (!internal.$type) {
                return null;
            }
            let name = internal.$type.name;
            let externalName = "Igc" + name + "Component";
            if (!TypeRegistrar.isRegistered(externalName)) {
                return null;
            }
            return TypeRegistrar.create(externalName);
        }
        _enqueueSetAttribute(attrName, attrValue) {
            this._queuedSetAttributes.push({ attrName: attrName, attrValue: attrValue });
        }
        _flushQueuedAttributes() {
            this._settingAttributes = true;
            for (let i = 0; i < this._queuedSetAttributes.length; i++) {
                this.setAttribute(this._queuedSetAttributes[i].attrName, this._queuedSetAttributes[i].attrValue);
            }
            this._settingAttributes = false;
            this._queuedSetAttributes.length = 0;
        }
        _a(attrName, attrValue) {
            if (this._updatingFromAttribute) {
                return;
            }
            if (attrValue) {
                attrValue = attrValue.toString();
            }
            this._settingAttributes = true;
            attrName = toSpinal(attrName);
            if (this._attached) {
                this.setAttribute(attrName, attrValue);
            }
            else {
                this._enqueueSetAttribute(attrName, attrValue);
            }
            this._settingAttributes = false;
        }
        static get observedAttributes() {
            if (IgcLinearGaugeComponent._observedAttributesIgcLinearGaugeComponent == null) {
                let names = getAllPropertyNames(IgcLinearGaugeComponent);
                for (let i = 0; i < names.length; i++) {
                    names[i] = toSpinal(names[i]);
                }
                IgcLinearGaugeComponent._observedAttributesIgcLinearGaugeComponent = names;
            }
            return IgcLinearGaugeComponent._observedAttributesIgcLinearGaugeComponent;
        }
        attributeChangedCallback(name, oldValue, newValue) {
            if (this._settingAttributes) {
                return;
            }
            let setName = fromSpinal(name);
            this._updatingFromAttribute = true;
            this[setName] = newValue;
            this._updatingFromAttribute = false;
        }
        static register() {
            if (!IgcLinearGaugeComponent._isElementRegistered) {
                IgcLinearGaugeComponent._isElementRegistered = true;
                RegisterElementHelper.registerElement(IgcLinearGaugeComponent.htmlTagName, IgcLinearGaugeComponent);
            }
        }
        /**
     * Gets a value indicating whether the bullet graph is currently animating.
    */
        get animating() {
            return this.i.a4;
        }
        /**
         * Gets the transition progress of the animation when the control is animating.
        */
        get transitionProgress() {
            return this.i.cz;
        }
        set transitionProgress(v) {
            this.i.cz = +v;
            this._a("transitionProgress", this.i.cz);
        }
        /**
         * Gets or sets the orientation of the scale.
        */
        get orientation() {
            return this.i.as;
        }
        set orientation(v) {
            this.i.as = ensureEnum(LinearScaleOrientation_$type, v);
            this._a("orientation", enumToString(LinearScaleOrientation_$type, this.i.as));
        }
        /**
         * Gets or sets a collection of brushes to be used as the palette for linear gauge ranges.
        */
        get rangeBrushes() {
            return fromBrushCollection(this.i.ah);
        }
        set rangeBrushes(v) {
            this.i.ah = toBrushCollection(v);
            this._a("rangeBrushes", brushCollectionToString(this.i.ah));
        }
        /**
         * Gets or sets a collection of brushes to be used as the palette for linear gauge outlines.
        */
        get rangeOutlines() {
            return fromBrushCollection(this.i.ai);
        }
        set rangeOutlines(v) {
            this.i.ai = toBrushCollection(v);
            this._a("rangeOutlines", brushCollectionToString(this.i.ai));
        }
        /**
         * Gets or sets the minimum value of the scale.
        */
        get minimumValue() {
            return this.i.b4;
        }
        set minimumValue(v) {
            this.i.b4 = +v;
            this._a("minimumValue", this.i.b4);
        }
        /**
         * Gets the resolved minimum value of the scale.
        */
        get actualMinimumValue() {
            return this.i.bs;
        }
        set actualMinimumValue(v) {
            this.i.bs = +v;
            this._a("actualMinimumValue", this.i.bs);
        }
        /**
         * Gets or sets the maximum value of the scale.
        */
        get maximumValue() {
            return this.i.b3;
        }
        set maximumValue(v) {
            this.i.b3 = +v;
            this._a("maximumValue", this.i.b3);
        }
        /**
         * Gets the resolved maximum value of the scale.
        */
        get actualMaximumValue() {
            return this.i.br;
        }
        set actualMaximumValue(v) {
            this.i.br = +v;
            this._a("actualMaximumValue", this.i.br);
        }
        /**
         * Gets or sets the value at which the needle is positioned.
        */
        get value() {
            return this.i.c0;
        }
        set value(v) {
            this.i.c0 = +v;
            this._a("value", this.i.c0);
        }
        /**
         * Gets or sets the shape to use when rendering the needle from a number of options.
        */
        get needleShape() {
            return this.i.ap;
        }
        set needleShape(v) {
            this.i.ap = ensureEnum(LinearGraphNeedleShape_$type, v);
            this._a("needleShape", enumToString(LinearGraphNeedleShape_$type, this.i.ap));
        }
        /**
         * Gets or sets the name used for needle.
        */
        get needleName() {
            return this.i.d5;
        }
        set needleName(v) {
            this.i.d5 = v;
        }
        /**
         * Gets or sets the position at which to start rendering the ranges, measured from the front/bottom of the control as a value from 0 to 1.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
        */
        get rangeInnerExtent() {
            return this.i.ck;
        }
        set rangeInnerExtent(v) {
            this.i.ck = +v;
            this._a("rangeInnerExtent", this.i.ck);
        }
        /**
         * Gets or sets the position at which to start rendering the scale, measured from the bottom/front (when orientation is horizontal/vertical) of the control as a value from 0 to 1.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
        */
        get scaleInnerExtent() {
            return this.i.co;
        }
        set scaleInnerExtent(v) {
            this.i.co = +v;
            this._a("scaleInnerExtent", this.i.co);
        }
        /**
         * Gets or sets the position at which to stop rendering the range as a value from 0 to 1 measured from the front/bottom of the linear gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
        */
        get rangeOuterExtent() {
            return this.i.cl;
        }
        set rangeOuterExtent(v) {
            this.i.cl = +v;
            this._a("rangeOuterExtent", this.i.cl);
        }
        /**
         * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1 measured from the bottom/front (when orientation is horizontal/vertical) of the linear gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
        */
        get scaleOuterExtent() {
            return this.i.cq;
        }
        set scaleOuterExtent(v) {
            this.i.cq = +v;
            this._a("scaleOuterExtent", this.i.cq);
        }
        /**
         * Gets or sets the position at which to start rendering the needle geometry, measured from the front/bottom of the linear gauge as a value from 0 to 1.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
        */
        get needleInnerExtent() {
            return this.i.cb;
        }
        set needleInnerExtent(v) {
            this.i.cb = +v;
            this._a("needleInnerExtent", this.i.cb);
        }
        /**
         * Gets or sets the position at which to stop rendering the needle geometry as a value from 0 to 1 measured from the front/bottom of the linear gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
        */
        get needleOuterExtent() {
            return this.i.cf;
        }
        set needleOuterExtent(v) {
            this.i.cf = +v;
            this._a("needleOuterExtent", this.i.cf);
        }
        /**
         * Gets or sets the width of the needle's inner base.
        */
        get needleInnerBaseWidth() {
            return this.i.ca;
        }
        set needleInnerBaseWidth(v) {
            this.i.ca = +v;
            this._a("needleInnerBaseWidth", this.i.ca);
        }
        /**
         * Gets or sets the width of the needle's outer base.
        */
        get needleOuterBaseWidth() {
            return this.i.ce;
        }
        set needleOuterBaseWidth(v) {
            this.i.ce = +v;
            this._a("needleOuterBaseWidth", this.i.ce);
        }
        /**
         * Gets or sets the width of the needle's inner point.
        */
        get needleInnerPointWidth() {
            return this.i.cd;
        }
        set needleInnerPointWidth(v) {
            this.i.cd = +v;
            this._a("needleInnerPointWidth", this.i.cd);
        }
        /**
         * Gets or sets the width of the needle's outer point.
        */
        get needleOuterPointWidth() {
            return this.i.ch;
        }
        set needleOuterPointWidth(v) {
            this.i.ch = +v;
            this._a("needleOuterPointWidth", this.i.ch);
        }
        /**
         * Gets or sets the extent of the needle's inner point.
        */
        get needleInnerPointExtent() {
            return this.i.cc;
        }
        set needleInnerPointExtent(v) {
            this.i.cc = +v;
            this._a("needleInnerPointExtent", this.i.cc);
        }
        /**
         * Gets or sets the extent of the needle's outer point.
        */
        get needleOuterPointExtent() {
            return this.i.cg;
        }
        set needleOuterPointExtent(v) {
            this.i.cg = +v;
            this._a("needleOuterPointExtent", this.i.cg);
        }
        /**
         * Gets or sets the interval to use for the scale.
        */
        get interval() {
            return this.i.by;
        }
        set interval(v) {
            this.i.by = +v;
            this._a("interval", this.i.by);
        }
        /**
         * A value to start adding tickmarks, added to the scale's MinimumValue.
        */
        get ticksPostInitial() {
            return this.i.cv;
        }
        set ticksPostInitial(v) {
            this.i.cv = +v;
            this._a("ticksPostInitial", this.i.cv);
        }
        /**
         * A value to stop adding tickmarks, subtracted from the scale's MaximumValue.
        */
        get ticksPreTerminal() {
            return this.i.cw;
        }
        set ticksPreTerminal(v) {
            this.i.cw = +v;
            this._a("ticksPreTerminal", this.i.cw);
        }
        /**
         * Gets or sets the interval to use for rendering labels. This defaults to be the same interval as the tickmarks on the scale.
        */
        get labelInterval() {
            return this.i.b0;
        }
        set labelInterval(v) {
            this.i.b0 = +v;
            this._a("labelInterval", this.i.b0);
        }
        /**
         * Gets or sets the position at which to put the labels as a value from 0 to 1, measured from the bottom of the scale.
         * Values further from zero than 1 can be used to hide the labels of the linear gauge.
        */
        get labelExtent() {
            return this.i.bz;
        }
        set labelExtent(v) {
            this.i.bz = +v;
            this._a("labelExtent", this.i.bz);
        }
        /**
         * A value to start adding labels, added to the scale's MinimumValue.
        */
        get labelsPostInitial() {
            return this.i.b1;
        }
        set labelsPostInitial(v) {
            this.i.b1 = +v;
            this._a("labelsPostInitial", this.i.b1);
        }
        /**
         * A value to stop adding labels, subtracted from the scale's MaximumValue.
        */
        get labelsPreTerminal() {
            return this.i.b2;
        }
        set labelsPreTerminal(v) {
            this.i.b2 = +v;
            this._a("labelsPreTerminal", this.i.b2);
        }
        /**
         * Gets or sets the number of minor tickmarks to place between major tickmarks.
        */
        get minorTickCount() {
            return this.i.b5;
        }
        set minorTickCount(v) {
            this.i.b5 = +v;
            this._a("minorTickCount", this.i.b5);
        }
        /**
         * Gets or sets the position at which to start rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
        */
        get tickStartExtent() {
            return this.i.cx;
        }
        set tickStartExtent(v) {
            this.i.cx = +v;
            this._a("tickStartExtent", this.i.cx);
        }
        /**
         * Gets or sets the position at which to stop rendering the major tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
        */
        get tickEndExtent() {
            return this.i.cu;
        }
        set tickEndExtent(v) {
            this.i.cu = +v;
            this._a("tickEndExtent", this.i.cu);
        }
        /**
         * Gets or sets the stroke thickness to use when rendering ticks.
        */
        get tickStrokeThickness() {
            return this.i.cy;
        }
        set tickStrokeThickness(v) {
            this.i.cy = +v;
            this._a("tickStrokeThickness", this.i.cy);
        }
        /**
         * Gets or sets the brush to use for the major tickmarks.
        */
        get tickBrush() {
            return brushToString(this.i.h1);
        }
        set tickBrush(v) {
            this.i.h1 = stringToBrush(v);
            this._a("tickBrush", brushToString(this.i.h1));
        }
        /**
         * Gets or sets the brush to use for the label font.
        */
        get fontBrush() {
            return brushToString(this.i.hu);
        }
        set fontBrush(v) {
            this.i.hu = stringToBrush(v);
            this._a("fontBrush", brushToString(this.i.hu));
        }
        /**
         * Gets or sets the needle breadth.
        */
        get needleBreadth() {
            return this.i.b9;
        }
        set needleBreadth(v) {
            this.i.b9 = +v;
            this._a("needleBreadth", this.i.b9);
        }
        /**
         * Gets or sets the brush to use for needle element.
        */
        get needleBrush() {
            return brushToString(this.i.hx);
        }
        set needleBrush(v) {
            this.i.hx = stringToBrush(v);
            this._a("needleBrush", brushToString(this.i.hx));
        }
        /**
         * Gets or sets the brush to use for the outline of needle element.
        */
        get needleOutline() {
            return brushToString(this.i.hy);
        }
        set needleOutline(v) {
            this.i.hy = stringToBrush(v);
            this._a("needleOutline", brushToString(this.i.hy));
        }
        /**
         * Gets or sets the stroke thickness to use when rendering single actual value element.
        */
        get needleStrokeThickness() {
            return this.i.ci;
        }
        set needleStrokeThickness(v) {
            this.i.ci = +v;
            this._a("needleStrokeThickness", this.i.ci);
        }
        /**
         * Gets or sets the position at which to start rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
        */
        get minorTickStartExtent() {
            return this.i.b7;
        }
        set minorTickStartExtent(v) {
            this.i.b7 = +v;
            this._a("minorTickStartExtent", this.i.b7);
        }
        /**
         * Gets or sets the position at which to stop rendering the minor tickmarks as a value from 0 to 1, measured from the front/bottom of the linear gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
        */
        get minorTickEndExtent() {
            return this.i.b6;
        }
        set minorTickEndExtent(v) {
            this.i.b6 = +v;
            this._a("minorTickEndExtent", this.i.b6);
        }
        /**
         * Gets or sets the stroke thickness to use when rendering minor ticks.
        */
        get minorTickStrokeThickness() {
            return this.i.b8;
        }
        set minorTickStrokeThickness(v) {
            this.i.b8 = +v;
            this._a("minorTickStrokeThickness", this.i.b8);
        }
        /**
         * Gets or sets the brush to use for the minor tickmarks.
        */
        get minorTickBrush() {
            return brushToString(this.i.hw);
        }
        set minorTickBrush(v) {
            this.i.hw = stringToBrush(v);
            this._a("minorTickBrush", brushToString(this.i.hw));
        }
        /**
         * Gets or sets a value indicating whether the scale is inverted.
         * When the scale is inverted the direction in which the scale values increase is right to left.
        */
        get isScaleInverted() {
            return this.i.a8;
        }
        set isScaleInverted(v) {
            this.i.a8 = ensureBool(v);
            this._a("isScaleInverted", this.i.a8);
        }
        /**
         * Gets or sets the brush to use to fill the backing of the linear gauge.
        */
        get backingBrush() {
            return brushToString(this.i.hs);
        }
        set backingBrush(v) {
            this.i.hs = stringToBrush(v);
            this._a("backingBrush", brushToString(this.i.hs));
        }
        /**
         * Gets or sets the brush to use for the outline of the backing.
        */
        get backingOutline() {
            return brushToString(this.i.ht);
        }
        set backingOutline(v) {
            this.i.ht = stringToBrush(v);
            this._a("backingOutline", brushToString(this.i.ht));
        }
        /**
         * Gets or sets the stroke thickness of the backing outline.
        */
        get backingStrokeThickness() {
            return this.i.bw;
        }
        set backingStrokeThickness(v) {
            this.i.bw = +v;
            this._a("backingStrokeThickness", this.i.bw);
        }
        /**
         * Gets or sets the inner extent of the linear gauge backing.
        */
        get backingInnerExtent() {
            return this.i.bu;
        }
        set backingInnerExtent(v) {
            this.i.bu = +v;
            this._a("backingInnerExtent", this.i.bu);
        }
        /**
         * Gets or sets the outer extent of the linear gauge backing.
        */
        get backingOuterExtent() {
            return this.i.bv;
        }
        set backingOuterExtent(v) {
            this.i.bv = +v;
            this._a("backingOuterExtent", this.i.bv);
        }
        /**
         * Gets or sets the position at which to start rendering the scale, measured from the front/bottom of the linear gauge as a value from 0 to 1.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
        */
        get scaleStartExtent() {
            return this.i.cs;
        }
        set scaleStartExtent(v) {
            this.i.cs = +v;
            this._a("scaleStartExtent", this.i.cs);
        }
        /**
         * Gets or sets the position at which to stop rendering the scale as a value from 0 to 1, measured from the front/bottom of the linear gauge.
         * Values further from zero than 1 can be used to make this extend further than the normal size of the linear gauge.
        */
        get scaleEndExtent() {
            return this.i.cn;
        }
        set scaleEndExtent(v) {
            this.i.cn = +v;
            this._a("scaleEndExtent", this.i.cn);
        }
        /**
         * Gets or sets the brush to use to fill the scale of the linear gauge.
        */
        get scaleBrush() {
            return brushToString(this.i.hz);
        }
        set scaleBrush(v) {
            this.i.hz = stringToBrush(v);
            this._a("scaleBrush", brushToString(this.i.hz));
        }
        /**
         * Gets or sets the brush to use for the outline of the scale.
        */
        get scaleOutline() {
            return brushToString(this.i.h0);
        }
        set scaleOutline(v) {
            this.i.h0 = stringToBrush(v);
            this._a("scaleOutline", brushToString(this.i.h0));
        }
        /**
         * Gets or sets the stroke thickness of the scale outline.
        */
        get scaleStrokeThickness() {
            return this.i.ct;
        }
        set scaleStrokeThickness(v) {
            this.i.ct = +v;
            this._a("scaleStrokeThickness", this.i.ct);
        }
        /**
         * Gets or sets whether needle dragging is enabled or not.
        */
        get isNeedleDraggingEnabled() {
            return this.i.a7;
        }
        set isNeedleDraggingEnabled(v) {
            this.i.a7 = ensureBool(v);
            this._a("isNeedleDraggingEnabled", this.i.a7);
        }
        /**
         * Gets or sets the label composite format used when creating label values.
        */
        get labelFormat() {
            return this.i.dk;
        }
        set labelFormat(v) {
            this.i.dk = v;
        }
        /**
         * Gets or sets the format specifiers to use with the LabelFormat string.
        */
        get labelFormatSpecifiers() {
            return this.i.ag;
        }
        set labelFormatSpecifiers(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.ag = v;
        }
        /**
         * Gets or sets the number of milliseconds over which changes to the linear gauge should be animated.
        */
        get transitionDuration() {
            return this.i.c4;
        }
        set transitionDuration(v) {
            this.i.c4 = +v;
            this._a("transitionDuration", this.i.c4);
        }
        /**
         * Gets or sets the time in milliseconds that tooltip appearance is delayed with.
        */
        get showToolTipTimeout() {
            return this.i.c3;
        }
        set showToolTipTimeout(v) {
            this.i.c3 = +v;
            this._a("showToolTipTimeout", this.i.c3);
        }
        /**
         * Gets or sets a value indicating whether tooltips are enabled.
        */
        get showToolTip() {
            return this.i.be;
        }
        set showToolTip(v) {
            this.i.be = ensureBool(v);
            this._a("showToolTip", this.i.be);
        }
        /**
         * Gets or sets the font.
        */
        get font() {
            return this.i.dd;
        }
        set font(v) {
            this.i.dd = v;
        }
        /**
         * Gets or sets the scaling value used to affect the pixel density of the control.
         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
         * to appear blurry.
        */
        get pixelScalingRatio() {
            return this.i.cj;
        }
        set pixelScalingRatio(v) {
            this.i.cj = +v;
            this._a("pixelScalingRatio", this.i.cj);
        }
        /**
         * Gets the actual pixel scaling ratio used to affect the pixel density of the control.
         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
         * to appear blurry.
        */
        get actualPixelScalingRatio() {
            return this.i.bt;
        }
        set actualPixelScalingRatio(v) {
            this.i.bt = +v;
            this._a("actualPixelScalingRatio", this.i.bt);
        }
        findByName(name) {
            if (this.findEphemera) {
                if (name && name.indexOf("@@e:") == 0) {
                    return this.findEphemera(name);
                }
            }
            if (this.ranges != null && this.ranges.findByName && this.ranges.findByName(name)) {
                return this.ranges.findByName(name);
            }
            if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {
                return arrayFindByName(this.labelFormatSpecifiers, name);
            }
            return null;
        }
        get hasUserValues() {
            return this._hasUserValues;
        }
        __m(propertyName) {
            if (!this._inStyling) {
                this._hasUserValues.add(propertyName);
            }
        }
        _styling(container, component, parent) {
            if (this._inStyling) {
                return;
            }
            this._inStyling = true;
            this._stylingContainer = container;
            this._stylingParent = component;
            let genericPrefix = "";
            let typeName = this.i.$type.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            genericPrefix = toSpinal("LinearGaugeComponent");
            let additionalPrefixes = [];
            let prefix = toSpinal(typeName);
            additionalPrefixes.push(prefix + "-");
            let b = this.i.$type.baseType;
            while (b && b.name != "Object" &&
                b.name != "Base" &&
                b.name != "Control" &&
                b.Name != "DependencyObject" &&
                b.Name != "FrameworkElement") {
                typeName = b.name;
                if (typeName.indexOf("Xam") === 0) {
                    typeName = typeName.substring(3);
                }
                let basePrefix = toSpinal(typeName);
                additionalPrefixes.push(basePrefix + "-");
                b = b.baseType;
            }
            if (parent) {
                let parentTypeName = parent.i.$type.name;
                if (parentTypeName.indexOf("Xam") === 0) {
                    parentTypeName = parentTypeName.substring(3);
                }
                let parentPrefix = toSpinal(parentTypeName);
                additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
                additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
            }
            initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
            if (this._otherStyling) {
                this._otherStyling(container, component, parent);
            }
            this._inStyling = false;
        }
        /**
     * Gets the value for the main scale of the gauge for a given point within the bounds of the gauge.
    
    * @param point  * The point for which to retrieve the associated value.
    */
        getValueForPoint(point) {
            let iv = this.i.bx(toPoint(point));
            return (iv);
        }
        needleContainsPoint(point, isFinger) {
            let iv = this.i.needleContainsPoint(toPoint(point), isFinger);
            return (iv);
        }
        /**
         * Returns visuals as a serialized string.
        
        */
        exportSerializedVisualData() {
            let iv = this.i.dc();
            return (iv);
        }
        /**
         * Use to force the linear gauge to finish any deferred work before printing or evaluating its visual.
         * This should only be called if the visual of the linear gauge needs to be synchronously saved or evaluated.
         * Calling this method too often will hinder the performance of the linear gauge.
        
        */
        flush() {
            this.i.e8();
        }
        /**
         * Called by the UI framework to provide a UI container for rendering this control.
        
        * @param container  * The UI container element.
        */
        provideContainer(container) {
            this.i.provideContainer(container);
        }
        containerResized() {
            this.i.containerResized();
        }
        styleUpdated() {
            this.i.f2();
        }
        /**
         * Event which is raised when a label of the the gauge is formatted.
         * Function takes first argument evt and second argument ui.
         * Use ui.owner to obtain reference to the gauge widget.
         * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
         * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
         * Use ui.value to obtain the value on the the gauge scale associated with the label.
         * Use ui.label to obtain the string value of the label.
        */
        get formatLabel() {
            return this._formatLabel;
        }
        set formatLabel(ev) {
            if (this._formatLabel_wrapped !== null) {
                this.i.formatLabel = delegateRemove(this.i.formatLabel, this._formatLabel_wrapped);
                this._formatLabel_wrapped = null;
                this._formatLabel = null;
            }
            this._formatLabel = ev;
            this._formatLabel_wrapped = (o, e) => {
                let outerArgs = new IgcFormatLinearGraphLabelEventArgs();
                outerArgs._provideImplementation(e);
                if (this.beforeFormatLabel) {
                    this.beforeFormatLabel(this, outerArgs);
                }
                if (this._formatLabel) {
                    this._formatLabel(this, outerArgs);
                }
            };
            this.i.formatLabel = delegateCombine(this.i.formatLabel, this._formatLabel_wrapped);
            ;
        }
        /**
         * Event which is raised when a label of the linear gauge is aligned along the scale.
         * Function takes first argument evt and second argument ui.
         * Use ui.owner to obtain reference to the gauge widget.
         * Use ui.actualMinimumValue to obtain the minimum value of the gauge scale.
         * Use ui.actualMaximumValue to obtain the maximum value of the gauge scale.
         * Use ui.value to obtain the value on the gauge scale associated with the label.
         * Use ui.label to obtain the string value of the label.
         * Use ui.width to obtain the width of the label.
         * Use ui.height to obtain the height of the label.
         * Use ui.offsetX to obtain the X offset of the label on the gauge scale.
         * Use ui.offsetY to obtain the Y offset of the label on the gauge scale.
        */
        get alignLabel() {
            return this._alignLabel;
        }
        set alignLabel(ev) {
            if (this._alignLabel_wrapped !== null) {
                this.i.alignLabel = delegateRemove(this.i.alignLabel, this._alignLabel_wrapped);
                this._alignLabel_wrapped = null;
                this._alignLabel = null;
            }
            this._alignLabel = ev;
            this._alignLabel_wrapped = (o, e) => {
                let outerArgs = new IgcAlignLinearGraphLabelEventArgs();
                outerArgs._provideImplementation(e);
                if (this.beforeAlignLabel) {
                    this.beforeAlignLabel(this, outerArgs);
                }
                if (this._alignLabel) {
                    this._alignLabel(this, outerArgs);
                }
            };
            this.i.alignLabel = delegateCombine(this.i.alignLabel, this._alignLabel_wrapped);
            ;
        }
        /**
         * Occurs when the Value property changes.
        */
        get valueChanged() {
            return this._valueChanged;
        }
        set valueChanged(ev) {
            if (this._valueChanged_wrapped !== null) {
                this.i.valueChanged = delegateRemove(this.i.valueChanged, this._valueChanged_wrapped);
                this._valueChanged_wrapped = null;
                this._valueChanged = null;
            }
            this._valueChanged = ev;
            this._valueChanged_wrapped = (o, e) => {
                let outerArgs = new IgcDoubleValueChangedEventArgs();
                outerArgs._provideImplementation(e);
                if (this.beforeValueChanged) {
                    this.beforeValueChanged(this, outerArgs);
                }
                if (this._valueChanged) {
                    this._valueChanged(this, outerArgs);
                }
            };
            this.i.valueChanged = delegateCombine(this.i.valueChanged, this._valueChanged_wrapped);
            ;
        }
        get actualMinimumValueChange() {
            return this._actualMinimumValueChange;
        }
        set actualMinimumValueChange(ev) {
            if (this._actualMinimumValueChange_wrapped !== null) {
                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);
                this._actualMinimumValueChange_wrapped = null;
                this._actualMinimumValueChange = null;
            }
            this._actualMinimumValueChange = ev;
            this._actualMinimumValueChange_wrapped = (o, e) => {
                let ext = this.actualMinimumValue;
                if (e.propertyName == 'Bs') {
                    if (this.beforeActualMinimumValueChange) {
                        this.beforeActualMinimumValueChange(this, ext);
                    }
                    if (this._actualMinimumValueChange) {
                        this._actualMinimumValueChange(this, ext);
                    }
                }
            };
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMinimumValueChange_wrapped);
        }
        get actualMaximumValueChange() {
            return this._actualMaximumValueChange;
        }
        set actualMaximumValueChange(ev) {
            if (this._actualMaximumValueChange_wrapped !== null) {
                this.i.propertyChanged = delegateRemove(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);
                this._actualMaximumValueChange_wrapped = null;
                this._actualMaximumValueChange = null;
            }
            this._actualMaximumValueChange = ev;
            this._actualMaximumValueChange_wrapped = (o, e) => {
                let ext = this.actualMaximumValue;
                if (e.propertyName == 'Br') {
                    if (this.beforeActualMaximumValueChange) {
                        this.beforeActualMaximumValueChange(this, ext);
                    }
                    if (this._actualMaximumValueChange) {
                        this._actualMaximumValueChange(this, ext);
                    }
                }
            };
            this.i.propertyChanged = delegateCombine(this.i.propertyChanged, this._actualMaximumValueChange_wrapped);
        }
    }
    IgcLinearGaugeComponent._observedAttributesIgcLinearGaugeComponent = null;
    IgcLinearGaugeComponent.htmlTagName = "igc-linear-gauge";
    IgcLinearGaugeComponent._isElementRegistered = false;
    return IgcLinearGaugeComponent;
})();
