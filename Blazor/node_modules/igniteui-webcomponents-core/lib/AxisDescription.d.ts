import { Description } from "./Description";
import { Type } from "./type";
import { AxisAnnotationDescription } from "./AxisAnnotationDescription";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
/**
 * @hidden
 */
export declare abstract class AxisDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    readonly type: string;
    constructor();
    private bo;
    formatLabelRef: string;
    private b6;
    title: string;
    private b4;
    stroke: string;
    private bl;
    actualStroke: string;
    private am;
    strokeThickness: number;
    private b3;
    strip: string;
    private bz;
    majorStroke: string;
    private bj;
    actualMajorStroke: string;
    private ak;
    majorStrokeThickness: number;
    private b0;
    minorStroke: string;
    private bk;
    actualMinorStroke: string;
    private al;
    minorStrokeThickness: number;
    private b5;
    tickStroke: string;
    private ao;
    tickStrokeThickness: number;
    private an;
    tickLength: number;
    private l;
    isDisabled: boolean;
    private m;
    isInverted: boolean;
    private o;
    shouldAvoidAnnotationCollisions: boolean;
    private p;
    shouldKeepAnnotationsInView: boolean;
    private s;
    usePerLabelHeightMeasurement: boolean;
    private r;
    useEnhancedIntervalManagement: boolean;
    private bf;
    enhancedIntervalMinimumCharacters: number;
    private j;
    enhancedIntervalPreferMoreCategoryLabels: boolean;
    private bw;
    labelTextColor: string;
    private bv;
    labelLocation: string;
    private n;
    labelShowFirstLabel: boolean;
    private ad;
    labelAngle: number;
    private af;
    labelExtent: number;
    private ah;
    labelLeftMargin: number;
    private ai;
    labelRightMargin: number;
    private aj;
    labelTopMargin: number;
    private ae;
    labelBottomMargin: number;
    private bu;
    labelHorizontalAlignment: string;
    private bx;
    labelVerticalAlignment: string;
    private bn;
    crossingAxisRef: string;
    private bh;
    crossingValue: any;
    private cc;
    titlePosition: string;
    private cd;
    titleTextColor: string;
    private cb;
    titleLocation: string;
    private q;
    titleShowFirstLabel: boolean;
    private ap;
    titleAngle: number;
    private ar;
    titleExtent: number;
    private at;
    titleLeftMargin: number;
    private au;
    titleRightMargin: number;
    private av;
    titleTopMargin: number;
    private aq;
    titleBottomMargin: number;
    private ca;
    titleHorizontalAlignment: string;
    private ce;
    titleVerticalAlignment: string;
    private f;
    annotations: AxisAnnotationDescription[];
    private bm;
    coercionMethodsRef: string;
    private k;
    expectFunctions: boolean;
    private bt;
    labelFormat: string;
    private g;
    labelFormatSpecifiers: FormatSpecifierDescription[];
    private b1;
    rangeChangedRef: string;
    private b2;
    renderRequestedRef: string;
    private bp;
    label: string;
    private bq;
    labelFontFamily: string;
    private ag;
    labelFontSize: number;
    private bs;
    labelFontWeight: string;
    private br;
    labelFontStyle: string;
    private b7;
    titleFontFamily: string;
    private as;
    titleFontSize: number;
    private b9;
    titleFontWeight: string;
    private b8;
    titleFontStyle: string;
    private by;
    labelVisibility: string;
}
