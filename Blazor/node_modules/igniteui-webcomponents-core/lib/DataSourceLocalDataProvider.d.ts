import { Base, IList, Type } from "./type";
import { IDataSourceLocalDataProvider } from "./IDataSourceLocalDataProvider";
import { IDataSourceSchema } from "./IDataSourceSchema";
import { DataSourceSchemaPropertyType } from "./DataSourceSchemaPropertyType";
import { IDataSourceExecutionContext } from "./IDataSourceExecutionContext";
import { IDataSourceDataProviderUpdateNotifier } from "./IDataSourceDataProviderUpdateNotifier";
import { SortDescriptionCollection } from "./SortDescriptionCollection";
import { FilterExpressionCollection } from "./FilterExpressionCollection";
import { SummaryDescriptionCollection } from "./SummaryDescriptionCollection";
import { DataSourceSummaryScope } from "./DataSourceSummaryScope";
import { DataSourceDataProviderSchemaChangedEventArgs } from "./DataSourceDataProviderSchemaChangedEventArgs";
/**
 * @hidden
 */
export declare class DataSourceLocalDataProvider extends Base implements IDataSourceLocalDataProvider {
    static $t: Type;
    constructor();
    private as;
    private m;
    private l;
    private f;
    private n;
    private e;
    private z;
    private aa;
    dataSource: any;
    private t;
    private ac;
    af: string;
    private an;
    private c;
    schemaChanged: (sender: any, args: DataSourceDataProviderSchemaChangedEventArgs) => void;
    getItemAtIndex(a: number): any;
    private s;
    private u;
    getItemValue(a: any, b: string): any;
    setItemValue(a: any, b: string, c: any): void;
    removeItem(a: any): void;
    addItem(a: any): void;
    private aj;
    readonly actualCount: number;
    private i;
    readonly actualSchema: IDataSourceSchema;
    private k;
    private j;
    resolveSchemaPropertyType(a: string): DataSourceSchemaPropertyType;
    ar(a: IDataSourceSchema): void;
    private v;
    private al;
    private ak;
    private w;
    private b;
    private static d;
    private ab;
    protected am(a: string, b: any, c: any): void;
    private x;
    protected readonly y: IList;
    private q;
    protected ao(a: string, b: any, c: any): void;
    private h;
    executionContext: IDataSourceExecutionContext;
    protected readonly r: boolean;
    notifySetItem(a: number, b: any, c: any): void;
    notifyClearItems(): void;
    notifyInsertItem(a: number, b: any): void;
    notifyRemoveItem(a: number, b: any): void;
    private g;
    updateNotifier: IDataSourceDataProviderUpdateNotifier;
    private p;
    deferAutoRefresh: boolean;
    readonly isSortingSupported: boolean;
    readonly isFilteringSupported: boolean;
    readonly sortDescriptions: SortDescriptionCollection;
    readonly filterExpressions: FilterExpressionCollection;
    readonly summaryDescriptions: SummaryDescriptionCollection;
    summaryScope: DataSourceSummaryScope;
    readonly notifyUsingSourceIndexes: boolean;
    private a;
    propertiesRequested: string[];
    readonly isItemIndexLookupSupported: boolean;
    readonly isKeyIndexLookupSupported: boolean;
    readonly isGroupingSupported: boolean;
    readonly groupDescriptions: SortDescriptionCollection;
    o: boolean;
    queueAutoRefresh(): void;
    ai(): void;
    ap(): void;
    protected aq(): void;
    flushAutoRefresh(): void;
    refresh(): void;
    indexOfItem(a: any): number;
    indexOfKey(a: any[]): number;
}
