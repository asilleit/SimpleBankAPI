import { DataLegendSeriesValueType } from "./DataLegendSeriesValueType";
import { DataLegendSeriesValueInfo as DataLegendSeriesValueInfo_internal } from "./DataLegendSeriesValueInfo";
/**
 * Represent info about series values
*/
export declare class IgcDataLegendSeriesValueInfo {
    protected createImplementation(): DataLegendSeriesValueInfo_internal;
    protected _implementation: any;
    /**
     * @hidden
     */
    readonly i: DataLegendSeriesValueInfo_internal;
    private onImplementationCreated;
    constructor();
    protected _provideImplementation(i: any): void;
    /**
     * Gets value of series
    */
    value: number;
    /**
     * Gets or sets prefix for negative value
    */
    valueNegativePrefix: string;
    /**
     * Gets or sets suffix for negative value
    */
    valueNegativeSuffix: string;
    /**
     * Gets or sets prefix for positive value
    */
    valuePositivePrefix: string;
    /**
     * Gets or sets suffix for positive value
    */
    valuePositiveSuffix: string;
    /**
     * Gets value color used by the series
    */
    formatWithSeriesColor: string;
    /**
     * Gets or sets minimum digits used for displaying faction of the value
    */
    formatMinFractions: number;
    /**
     * Gets or sets maximum digits used for displaying faction of the value
    */
    formatMaxFractions: number;
    /**
     * Gets or sets whether or not use conditional color
    */
    formatUsePositiveColor: boolean;
    /**
     * Gets or sets whether or not use conditional color
    */
    formatUseNegativeColor: boolean;
    /**
     * Gets or sets whether or not allow displaying value as currency
    */
    formatAllowCurrency: boolean;
    /**
     * Gets or sets whether or not allow displaying value as percentage
    */
    formatAllowPercent: boolean;
    /**
     * Gets or sets whether or not allow displaying value as decimal
    */
    formatAllowDecimal: boolean;
    /**
     * Gets or sets whether or not allow displaying value as integer
    */
    formatAllowInteger: boolean;
    /**
     * Gets or sets whether or not allow displaying value with abbreviation
    */
    formatAllowAbbreviation: boolean;
    /**
     * Gets or sets type of value
    */
    valueType: DataLegendSeriesValueType;
    /**
     * Gets the index of series
    */
    index: number;
    /**
     * Gets or sets whether this value is excluded/hidden by default in Data Legend
    */
    isExcludeByDefault: boolean;
    /**
     * Gets or sets whether the unit text is allowed by the series, e.g. "Hz"
    */
    allowUnits: boolean;
    /**
     * Gets or sets whether the label text is allowed by the series, e.g. "H:"
    */
    allowLabels: boolean;
    /**
     * Gets or sets member path for the series value, e.g. "High"
    */
    memberPath: string;
    /**
     * Gets or sets label for the series value, e.g. "H:"
    */
    memberSymbol: string;
    /**
     * Gets or sets unit text for the value, e.g. "Hz"
    */
    memberUnit: string;
    findByName(name: string): any;
    /**
     * Converts this object to a string
    
    */
    toString(): string;
}
