import { Base, Point, Type, INotifyPropertyChanged, PropertyChangedEventArgs } from "./type";
import { IScrollerView } from "./IScrollerView";
import { DomRenderer, DomWrapper } from "./dom";
import { IExecutionContext } from "./IExecutionContext";
import { CanvasGestureDOMEventProxy } from "./CanvasGestureDOMEventProxy";
import { Brush } from "./Brush";
import { Key } from "./Key";
import { DoubleAnimator } from "./DoubleAnimator";
import { ScrollbarStyle } from "./ScrollbarStyle";
import { IScrollerKeyboardListener } from "./IScrollerKeyboardListener";
import { ScrollerScrollingEventArgs } from "./ScrollerScrollingEventArgs";
/**
 * @hidden
 */
export declare class ScrollerView extends Base implements IScrollerView {
    static $t: Type;
    constructor(a: Scroller);
    c: Scroller;
    protected ab: DomRenderer;
    protected af: DomWrapper;
    protected b: IExecutionContext;
    getDefaultScrollbarBrush(): Brush;
    protected aa: HTMLDivElement;
    protected a: CanvasGestureDOMEventProxy;
    ae: DomWrapper;
    ac: DomWrapper;
    ad: DomWrapper;
    ag: DomWrapper;
    provideContainer(a: any): void;
    private k;
    private r;
    private ah;
    private ai;
    private aj;
    private p;
    private q;
    private n;
    private o;
    private e;
    private j;
    onViewportHeightChanged(a: number): void;
    onViewportWidthChanged(a: number): void;
    onContentHeightChanged(a: number): void;
    onContentWidthChanged(a: number): void;
    cancelInertia(): void;
    private ak;
    private al;
    updateScrollTop(a: number): void;
    private am;
    getInitialScrollLeft(): number;
    getInitialScrollTop(): number;
    private l;
    private m;
    private an;
    updateScrollLeft(a: number): void;
    provideContent(a: any): void;
    private d;
    requestWork(a: () => void): void;
    private i;
    private h;
    private w;
    private t;
    private x;
    private u;
    private g;
    private f;
    private v;
    private s;
    hideVScrollbar(): void;
    hideHScrollbar(): void;
    updateVScrollbar(a: number, b: number): void;
    updateHScrollbar(a: number, b: number): void;
    updateScrollbarBrush(): void;
    updateScrollbarStatus(a: boolean): void;
    private y;
    private z;
    focus(): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    attachNativeScroll(): void;
    detachNativeScroll(): void;
    private onNativeScroll;
}
/**
 * @hidden
 */
export declare class Scroller extends Base implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    private bh;
    smallVerticalChange: number;
    private _keyboardListener;
    keyboardListener: IScrollerKeyboardListener;
    private a9;
    largeVerticalChange: number;
    private a3;
    bq: number;
    private a1;
    bo: number;
    private bg;
    smallHorizontalChange: number;
    private a8;
    largeHorizontalChange: number;
    private a2;
    bp: number;
    private a0;
    bn: number;
    private a6;
    contentWidth: number;
    private ba;
    minScrollbarSize: number;
    private bd;
    scrollbarSpan: number;
    ao(a: Key, b: boolean, c: boolean): boolean;
    private au;
    private al;
    private ak;
    private av;
    private ai;
    private am;
    private at;
    private ap;
    private aw;
    private ah;
    private as;
    private ar;
    private aj;
    private an;
    private bj;
    verticalTrackStartInset: number;
    private dx;
    scrollbarBrush: Brush;
    private dg;
    private x;
    private ax;
    protected dj(a: string, b: any, c: any): void;
    private a5;
    contentHeight: number;
    dh(a: number): void;
    df(a: number): void;
    di(a: number, b: number, c?: boolean): void;
    private bl;
    viewportWidth: number;
    private bk;
    viewportHeight: number;
    private bf;
    scrollTop: number;
    private be;
    scrollLeft: number;
    private c;
    view: IScrollerView;
    provideContainer(a: any): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    provideContent(a: any): void;
    aq(a: Point, b: number, c: number): boolean;
    private v;
    lockScrollDirection: boolean;
    aa: boolean;
    private a4;
    actualVerticalScrollbarHeight: number;
    private az;
    actualHorizontalScrollbarWidth: number;
    private h;
    scrollbarStyle: ScrollbarStyle;
    private a7;
    horizontalScrollbarStatus: number;
    private bi;
    verticalScrollbarStatus: number;
    private j;
    readonly horizontalAnimation: DoubleAnimator;
    private k;
    readonly verticalAnimation: DoubleAnimator;
    private bu;
    private b5;
    private bv;
    private b6;
    private _executionContext;
    executionContext: IExecutionContext;
    readonly isVerticalActive: boolean;
    readonly isHorizontalActive: boolean;
    private _isDraggingVBar;
    isDraggingVBar: boolean;
    private _isDraggingHBar;
    isDraggingHBar: boolean;
    private s;
    private q;
    private r;
    private dz;
    private p;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    focus(): void;
    de(a: Point): void;
    dd(a: Point): void;
    onScrolling: (sender: any, args: ScrollerScrollingEventArgs) => void;
    onScrollStart: (sender: any, args: ScrollerScrollingEventArgs) => void;
    onScrollStop: (sender: any, args: ScrollerScrollingEventArgs) => void;
    private _isScrolling;
    isScrolling: boolean;
    scrollTo(a: number, b: number): void;
    private bb;
    private bc;
    private dn;
    private dp;
    private w;
    private dm;
    private ay;
    private dt;
    private dw;
    private du;
    private dv;
    dc(a: Point): void;
    private c1;
    private c2;
    c3(): void;
    c4(): void;
    c7(): void;
    c8(): void;
    private cb;
    private cc;
    private cd;
    private o;
    private z;
    private n;
    private y;
    private t;
    private u;
    private dr;
    private ds;
    private c5;
    private c6;
}
