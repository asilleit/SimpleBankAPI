/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { TypeRegistrar } from './type';
import { html, render } from './template';
import { createGuid } from './string';
import { IgcHTMLElement } from './igc-html-element';
import { FontDefaults } from "./FontDefaults";
let requiredStyle = `
    .ui-tooltip-container {
        padding: 5px; 
        padding: var(--tooltip-container-padding, 5px);
        background-color: white; 
        background-color: var(--tooltip-container-background-color, white);
        border-style: solid; 
        border-style: var(--tooltip-container-border-style, solid);
        border-width: 1px; 
        border-width: var(--tooltip-container-border-width, 1px);
        color: ${FontDefaults.tooltipLabelsBrush.fill}; 
        color: var(--tooltip-container-text-color, ${FontDefaults.tooltipLabelsBrush.fill});
        font: ${FontDefaults.tooltipLabelsFontSize}px ${FontDefaults.tooltipLabelsFontFamily};
        font: var(--tooltip-container-font, ${FontDefaults.tooltipLabelsFontSize}px ${FontDefaults.tooltipLabelsFontFamily});
        pointer-events: none;
        white-space: nowrap;
        border-color: #666;
        border-color: var(--tooltip-container-border-color, #666);
    }
`;
let checked = /*@__PURE__*/ new WeakMap();
export let IgcTooltipContainerComponent = /*@__PURE__*/ (() => {
    class IgcTooltipContainerComponent extends IgcHTMLElement {
        constructor() {
            super();
            this._template = null;
            this._containerTemplate = null;
            this._attached = false;
            this._context = null;
            this._id = null;
            this._isBridged = false;
            this.ensureCss();
            this.containerTemplate = (context) => html `
        <div class='ui-tooltip-container'
            style="border-color: ${context && context.isSubContent ? 'transparent' : '#666'}">
            ${((context && this.template) ? this.template(context) : html ``)}
        </div>
`;
        }
        //private _tooltipContent: IgcTemplateContentComponent;
        ensureCss() {
            if (!document) {
                return;
            }
            if (checked.has(document)) {
                return;
            }
            for (let i = document.head.children.length - 1; i >= 0; i--) {
                let child = document.head.children[i];
                if (child.tagName &&
                    child.tagName.toLowerCase() == "style" && child.hasAttribute("data-ig-tooltip-style")) {
                    return;
                }
            }
            let style = document.createElement("style");
            style.textContent = requiredStyle;
            style.setAttribute('data-ig-tooltip-style', 'true');
            document.head.appendChild(style);
            checked.set(document, true);
        }
        set template(value) {
            var oldValue = this._template;
            this._template = value;
            this.onTemplateChanged(oldValue, this._template);
        }
        get template() {
            return this._template;
        }
        connectedCallback() {
            this.attachedCallback();
        }
        attachedCallback() {
            this._attached = true;
            this.classList.add("ig-tooltip-container");
            this.classList.add("igc-tooltip-container");
            this.render();
        }
        diconnectedCallBack() {
            if (this.template && this.template.___isBridged) {
                this.teardownBridgedTemplate(this.template);
            }
        }
        set containerTemplate(value) {
            this._containerTemplate = value;
            if (this._attached) {
                this.onContainerTemplateChanged();
            }
        }
        get containerTemplate() {
            return this._containerTemplate;
        }
        set context(value) {
            this._context = value;
            this.onContextChanged();
        }
        get context() {
            return this._context;
        }
        onContextChanged() {
            this.render();
        }
        teardownBridgedTemplate(value) {
            value.___onTemplateTeardown(this._template, this, this._template);
        }
        setupBridgedTemplate(value) {
            this._id = createGuid();
            value.___onTemplateInit(this._template, this, this._template);
        }
        onTemplateChanged(oldValue, newValue) {
            if (newValue && newValue.___isBridged && !this._isBridged) {
                this.setupBridgedTemplate(newValue);
                this._isBridged = true;
            }
            if (this._attached) {
                this.render();
            }
        }
        onContainerTemplateChanged() {
            this.render();
        }
        render() {
            if (this._isBridged) {
                if (this.context) {
                    this.context.___contentId = this._id;
                }
            }
            if (!this.containerTemplate || !this.context) {
                if (this.containerTemplate) {
                    render(this.containerTemplate(this.context), this);
                    if (this._isBridged) {
                        this._template.___onTemplateContextChanged(this._template, this, this.context);
                    }
                }
                else {
                    this.innerHTML = '';
                }
            }
            else {
                render(this.containerTemplate(this.context), this);
                if (this._isBridged) {
                    this._template.___onTemplateContextChanged(this._template, this, this.context);
                }
            }
        }
        destroy() {
        }
        static register() {
            if (!IgcTooltipContainerComponent._registered) {
                IgcTooltipContainerComponent._registered = true;
                if (window.customElements) {
                    window.customElements.define(IgcTooltipContainerComponent.htmlTagName, IgcTooltipContainerComponent);
                }
                else {
                    document.registerElement(IgcTooltipContainerComponent.htmlTagName, IgcTooltipContainerComponent);
                }
                TypeRegistrar.registerCons("IgcTooltipContainerComponent", IgcTooltipContainerComponent);
            }
        }
    }
    IgcTooltipContainerComponent._registered = false;
    IgcTooltipContainerComponent.htmlTagName = "igc-tooltip-container";
    return IgcTooltipContainerComponent;
})();
