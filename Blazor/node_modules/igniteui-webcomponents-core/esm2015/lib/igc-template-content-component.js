/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { TypeRegistrar } from './type';
import { render, html } from './template';
import { createGuid } from './string';
import { IgcHTMLElement } from './igc-html-element';
export let IgcTemplateContentComponent = /*@__PURE__*/ (() => {
    class IgcTemplateContentComponent extends IgcHTMLElement {
        constructor() {
            super();
            this._template = null;
            this._attached = false;
            this._context = null;
            this._id = null;
            this._isBridged = false;
            this.template = (context) => {
                return html `
               <div></div>  
            `;
            };
        }
        set template(value) {
            var oldValue = this._template;
            this._template = value;
            this.onTemplateChanged(oldValue, this._template);
        }
        get template() {
            return this._template;
        }
        connectedCallback() {
            this.attachedCallback();
        }
        attachedCallback() {
            this._attached = true;
            this.render();
        }
        diconnectedCallBack() {
            if (this.template && this.template.___isBridged) {
                this.teardownBridgedTemplate(this.template);
            }
        }
        set context(value) {
            if (this._context == null && value == null) {
                return;
            }
            this._context = value;
            this.onContextChanged();
        }
        get context() {
            return this._context;
        }
        markChanged() {
            this.onContextChanged();
        }
        onContextChanged() {
            this.render();
        }
        teardownBridgedTemplate(value) {
            value.___onTemplateTeardown(this._template, this, this._template);
        }
        setupBridgedTemplate(value) {
            this._id = createGuid();
            value.___onTemplateInit(this._template, this, this._template);
        }
        onTemplateChanged(oldValue, newValue) {
            if (newValue && newValue.___isBridged && !this._isBridged) {
                this.setupBridgedTemplate(newValue);
                this._isBridged = true;
            }
            if (this._attached) {
                this.render();
            }
        }
        render() {
            if (this._isBridged) {
                if (this.context) {
                    this.context.___contentId = this._id;
                }
            }
            if (!this.context || !this.template) {
                if (this.template) {
                    render(this.template(this.context), this);
                    if (this._isBridged) {
                        this._template.___onTemplateContextChanged(this._template, this, this.context);
                    }
                }
                else {
                    this.innerHTML = '';
                }
            }
            else {
                render(this.template(this.context), this);
                if (this._isBridged) {
                    this._template.___onTemplateContextChanged(this._template, this, this.context);
                }
            }
        }
        get owner() {
            return this._owner;
        }
        set owner(v) {
            this._owner = v;
        }
        static register() {
            if (!IgcTemplateContentComponent._registered) {
                IgcTemplateContentComponent._registered = true;
                if (window.customElements) {
                    window.customElements.define(IgcTemplateContentComponent.htmlTagName, IgcTemplateContentComponent);
                }
                else {
                    document.registerElement(IgcTemplateContentComponent.htmlTagName, IgcTemplateContentComponent);
                }
                TypeRegistrar.registerCons("IgcTemplateContentComponent", IgcTemplateContentComponent);
            }
        }
    }
    IgcTemplateContentComponent.htmlTagName = "igc-template-content";
    IgcTemplateContentComponent._registered = false;
    return IgcTemplateContentComponent;
})();
