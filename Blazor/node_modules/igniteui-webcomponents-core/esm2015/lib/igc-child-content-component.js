/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { TypeRegistrar } from './type';
import { IgcHTMLElement } from './igc-html-element';
export let IgcChildContentComponent = /*@__PURE__*/ (() => {
    class IgcChildContentComponent extends IgcHTMLElement {
        constructor() {
            super();
            this._display = "inline-block";
            this._flexDirection = "row";
            this._alignItems = "center";
            this._attached = false;
        }
        get display() {
            return this._display;
        }
        set display(value) {
            this._display = value;
            this.style.display = value;
        }
        get flexDirection() {
            return this._flexDirection;
        }
        set flexDirection(value) {
            this._flexDirection = value;
            this.style.flexDirection = value;
        }
        get alignItems() {
            return this._alignItems;
        }
        set alignItems(value) {
            this._alignItems = value;
            this.style.alignItems = value;
        }
        onChildrenChanged(children) {
            for (var i = 0; i < children.length; i++) {
                var child = children[i];
                child.remove();
                this.appendChild(child);
            }
        }
        connectedCallback() {
            this.attachedCallback();
        }
        attachedCallback() {
            this._attached = true;
        }
        static register() {
            if (!IgcChildContentComponent._registered) {
                IgcChildContentComponent._registered = true;
                if (window.customElements) {
                    window.customElements.define(IgcChildContentComponent.htmlTagName, IgcChildContentComponent);
                }
                else {
                    document.registerElement(IgcChildContentComponent.htmlTagName, IgcChildContentComponent);
                }
                TypeRegistrar.registerCons("IgcChildContentComponent", IgcChildContentComponent);
            }
        }
    }
    IgcChildContentComponent.htmlTagName = "igc-child-content";
    IgcChildContentComponent._registered = false;
    return IgcChildContentComponent;
})();
