import { IgCollection } from './IgCollection';
import { markType } from './type';
import { SyncableObservableCollection$2 } from './SyncableObservableCollection$2';
import { FormatSpecifier as FormatSpecifier_internal } from './FormatSpecifier';
import { IgcFormatSpecifier as IgcFormatSpecifier } from './igc-format-specifier';
export class IgcFormatSpecifierCollection extends IgCollection {
    constructor(list) {
        super();
        if (!IgcFormatSpecifier.$type) {
            IgcFormatSpecifier.$type = markType(IgcFormatSpecifier, "IgcFormatSpecifier");
        }
        if (list) {
            for (let i = 0; i < list.length; i++) {
                this.add(list[i]);
            }
        }
    }
    _createInnerColl() {
        if (!IgcFormatSpecifier.$type) {
            IgcFormatSpecifier.$type = markType(IgcFormatSpecifier, "IgcFormatSpecifier");
        }
        let coll = new SyncableObservableCollection$2(IgcFormatSpecifier.$type, FormatSpecifier_internal.$type, 0);
        coll.compare = (ext, int) => {
            let comp = ext;
            if (comp._implementation) {
                comp = comp._implementation;
            }
            if (comp.equals) {
                return comp.equals(int);
            }
            return comp === int;
        };
        coll.createTo = (ext) => {
            return ext._implementation;
        };
        coll.createFrom = (int) => {
            let ext = int.externalObject;
            if (!ext) {
                ext = new IgcFormatSpecifier();
                if (ext) {
                    ext._implementation = int;
                }
            }
            return ext;
        };
        return coll;
    }
}
