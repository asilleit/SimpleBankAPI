/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CodeGeneratingComponentRendererModuleEmitter } from "./CodeGeneratingComponentRendererModuleEmitter";
import { Dictionary$2 } from "./Dictionary$2";
import { List$1 } from "./List$1";
import { String_$type, fromEnum, markType } from "./type";
import { stringEndsWith } from "./string";
/**
 * @hidden
 */
export let TSCodeGeneratingComponentRendererModuleEmitter = /*@__PURE__*/ (() => {
    class TSCodeGeneratingComponentRendererModuleEmitter extends CodeGeneratingComponentRendererModuleEmitter {
        constructor(a, b, c) {
            super(b, c);
            this.q = 0;
            this.t = 0;
            this.r = false;
            this.s = new Dictionary$2(String_$type, List$1.$.specialize(String_$type), 0);
            this.q = a;
        }
        p() {
            super.p();
            this.t = 0;
        }
        get v() {
            switch (this.q) {
                case 1: return "Igx";
                case 2: return "Igr";
                case 3: return "Igc";
            }
            return "";
        }
        get u() {
            switch (this.q) {
                case 1: return "angular";
                case 2: return "react";
                case 3: return "webcomponents";
            }
            return "";
        }
        m(a) {
            super.m(a);
            if (a == "withDescriptions") {
                this.r = true;
                return;
            }
            let b = "igniteui-" + this.u + "-core";
            let c = "";
            let d = a.split('/');
            if (d.length == 1) {
                c = d[0];
                this.j.addPackageRef(c);
            }
            else {
                b = d[0];
                this.j.addPackageRef(b);
                b = "igniteui-" + this.u + "-" + b;
                c = d[1];
            }
            if (!this.s.containsKey(b)) {
                this.s.addItem(b, new List$1(String_$type, 0));
            }
            let e = this.s.item(b);
            if (this.t > 0) {
                this.d.l(",");
            }
            this.d.j(this.v + c);
            e.add(this.v + c);
            if (this.r) {
                if (this.t == 0) {
                    this.c.l("private _componentRenderer: ComponentRenderer = null;");
                    this.c.l("public get renderer(): ComponentRenderer {");
                    this.c.h();
                    this.c.l("if (this._componentRenderer == null) {");
                    this.c.h();
                    this.c.l("this._componentRenderer = new ComponentRenderer();");
                    this.c.l("var context = this._componentRenderer.context;");
                    this.g.addPackageImport("igniteui-" + this.u + "-core", "ComponentRenderer");
                }
                let f = c;
                if (stringEndsWith(f, "Module")) {
                    f = f.substr(0, f.length - ("Module").length);
                    f += "DescriptionModule";
                }
                this.g.addPackageImport("igniteui-" + this.u + "-core", f);
                this.c.l(f + ".register(context);");
            }
            this.t++;
        }
        o() {
            super.o();
            for (let a of fromEnum(this.s.keys)) {
                let b = a;
                let c = this.s.item(a);
                for (let d of fromEnum(c)) {
                    this.h.addPackageImport(b, d);
                }
            }
            if (this.r) {
                this.c.f();
                this.c.l("}");
                this.c.l("return this._componentRenderer;");
                this.c.f();
                this.c.l("}");
            }
        }
    }
    TSCodeGeneratingComponentRendererModuleEmitter.$t = /*@__PURE__*/ markType(TSCodeGeneratingComponentRendererModuleEmitter, 'TSCodeGeneratingComponentRendererModuleEmitter', CodeGeneratingComponentRendererModuleEmitter.$);
    return TSCodeGeneratingComponentRendererModuleEmitter;
})();
