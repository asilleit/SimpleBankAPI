/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { IgEvent } from "./IgEvent";
import { shadowWrap } from "./igc-html-element";
var IgcComponentRendererContainerComponent = /** @class */ /*@__PURE__*/ (function () {
    function IgcComponentRendererContainerComponent() {
        this._attrIgnoreList = ['class', 'style'];
        this.extraSlotNames = [];
        this.extraSlotNamesMap = new Set();
        this.shadowMode = false;
        this.childContentMode = false;
        this.listeners = [];
        this._currentRoot = null;
    }
    IgcComponentRendererContainerComponent.fromElement = function (ele) {
        if (ele.$$container) {
            return ele.$$container;
        }
        var c = new IgcComponentRendererContainerComponent();
        c.element = ele;
        if (ele.hasAttribute("shadow-dom-mode")) {
            var shadowRoot = shadowWrap(ele).attachShadow({ mode: "open" });
            c.element = shadowRoot;
            c.shadowMode = true;
        }
        if (ele.hasAttribute("child-content-mode")) {
            c.childContentMode = true;
            c.collectExtraSlots(ele);
        }
        ele.$$container = c;
        return c;
    };
    IgcComponentRendererContainerComponent.prototype.collectExtraSlots = function (ele) {
        for (var i = 0; i < ele.children.length; i++) {
            var child = ele.children[i];
            if (child.hasAttribute("slot")) {
                if (!this.extraSlotNamesMap.has(child.getAttribute("slot"))) {
                    this.extraSlotNames.push(child.getAttribute("slot"));
                    this.extraSlotNamesMap.add(child.getAttribute("slot"));
                }
            }
        }
    };
    IgcComponentRendererContainerComponent.prototype.ensureExtraSlots = function (ele) {
        var exist = new Set();
        for (var i = 0; i < ele.children.length; i++) {
            if (ele.children[i].tagName == "SLOT") {
                if (ele.hasAttribute("name")) {
                    exist.add(ele.getAttribute("name"));
                }
            }
        }
        for (var i = 0; i < this.extraSlotNames.length; i++) {
            if (!exist.has(this.extraSlotNames[i])) {
                var s = document.createElement("slot");
                s.setAttribute("name", this.extraSlotNames[i]);
                s.setAttribute("slot", this.extraSlotNames[i]);
                ele.append(s);
            }
        }
    };
    IgcComponentRendererContainerComponent.prototype.createObject = function (t, container, context) {
        if (typeof t == "string") {
            t = document.createElement(t);
        }
        else {
            var C = t;
            if (C.htmlTagName) {
                t = document.createElement(t.htmlTagName);
            }
            else {
                t = new C();
            }
        }
        return t;
    };
    IgcComponentRendererContainerComponent.prototype.replaceRootItem = function (t, deferAttach, continueActions) {
        var _this = this;
        for (var i = this.element.children.length - 1; i >= 0; i--) {
            this.element.children[i].remove();
        }
        if (typeof t == "string") {
            t = document.createElement(t);
        }
        else {
            var C = t;
            if (C.htmlTagName) {
                t = document.createElement(t.htmlTagName);
            }
            else {
                t = new C();
            }
        }
        this._currentRoot = t;
        if (!deferAttach) {
            this.element.appendChild(this._currentRoot);
        }
        this._currentRoot.width = "100%";
        this._currentRoot.height = "100%";
        if (this.childContentMode) {
            var slot = document.createElement("slot");
            this._currentRoot.appendChild(slot);
            this.ensureExtraSlots(this._currentRoot);
        }
        var parent = this.shadowMode ? this.element.host : this.element.parentElement;
        if (parent) {
            // sync attributes from the parent down to the root element.
            for (var i = 0; i < parent.attributes.length; i++) {
                var attr = parent.attributes.item(i);
                if (this._attrIgnoreList.includes(attr.name)) {
                    continue;
                }
                this._currentRoot.setAttribute(attr.name, attr.value);
                // this tells the component, if it supports it, that an attribute on it was synced from the parent.
                if (this._currentRoot.attributeSynced) {
                    this._currentRoot.attributeSynced(attr.name, attr.value);
                }
            }
            // setup an observer to watch for attribute changes so we can sync them with the root.
            if (!this._observer) {
                this._observer = new MutationObserver(function (mutationList, observer) {
                    for (var i = 0; i < mutationList.length; i++) {
                        if (mutationList[i].type === 'attributes') {
                            var attrName = mutationList[i].attributeName;
                            if (_this._attrIgnoreList.includes(attrName)) {
                                continue;
                            }
                            var attrValue = mutationList[i].target.getAttribute(attrName);
                            _this._currentRoot.setAttribute(attrName, attrValue);
                            if (_this._currentRoot.attributeSynced) {
                                _this._currentRoot.attributeSynced(attrName, attrValue);
                            }
                        }
                        if (mutationList[i].type === 'childList') {
                            mutationList[i].removedNodes.forEach(function (value, key, parent) {
                                if (value.hasAttribute("slot")) {
                                    var slotId = value.getAttribute("slot");
                                    for (var i_1 = 0; i_1 < _this._currentRoot.children.length; i_1++) {
                                        var child = _this._currentRoot.children[i_1];
                                        if (child.tagName === "SLOT" &&
                                            child.hasAttribute("name") &&
                                            child.hasAttribute("slot") &&
                                            child.getAttribute("name") === slotId &&
                                            child.getAttribute("slot") === slotId) {
                                            child.remove();
                                            i_1--;
                                        }
                                    }
                                    var slotIdx = _this.extraSlotNames.indexOf(slotId);
                                    _this.extraSlotNames.splice(slotIdx, 1);
                                    _this.extraSlotNamesMap.delete(slotId);
                                }
                            });
                            mutationList[i].addedNodes.forEach(function (value, key, parent) {
                                if (value.hasAttribute("slot")) {
                                    var slotId = value.getAttribute("slot");
                                    if (!_this.extraSlotNamesMap.has(slotId)) {
                                        var s = document.createElement("slot");
                                        s.setAttribute("name", slotId);
                                        s.setAttribute("slot", slotId);
                                        _this._currentRoot.append(s);
                                        _this.extraSlotNames.push(slotId);
                                        _this.extraSlotNamesMap.add(slotId);
                                    }
                                }
                            });
                        }
                    }
                });
                this._observer.observe(parent, { attributes: true, childList: this.childContentMode });
            }
            else {
                this._observer.observe(parent, { attributes: true, childList: this.childContentMode });
            }
        }
        continueActions(false);
        if (deferAttach) {
            this.element.appendChild(this._currentRoot);
        }
    };
    IgcComponentRendererContainerComponent.prototype.clearContainer = function (continueActions) {
        for (var i = this.element.children.length - 1; i >= 0; i--) {
            this.element.children[i].remove();
        }
        if (this._observer) {
            this._observer.disconnect();
        }
        continueActions(false);
    };
    IgcComponentRendererContainerComponent.prototype.getRootObject = function () {
        return this._currentRoot;
    };
    IgcComponentRendererContainerComponent.isEvent = function (obj) {
        return obj instanceof IgEvent;
    };
    return IgcComponentRendererContainerComponent;
}());
export { IgcComponentRendererContainerComponent };
