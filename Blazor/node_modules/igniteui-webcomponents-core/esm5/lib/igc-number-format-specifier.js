import * as tslib_1 from "tslib";
import { IgcFormatSpecifier } from "./igc-format-specifier";
import { NumberFormatSpecifier as NumberFormatSpecifier_internal } from "./NumberFormatSpecifier";
import { ensureBool } from "./componentUtil";
var IgcNumberFormatSpecifier = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgcNumberFormatSpecifier, _super);
    function IgcNumberFormatSpecifier() {
        return _super.call(this) || this;
    }
    IgcNumberFormatSpecifier.prototype.createImplementation = function () {
        return new NumberFormatSpecifier_internal();
    };
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "locale", {
        get: function () {
            return this.i.locale;
        },
        set: function (v) {
            this.i.locale = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "compactDisplay", {
        get: function () {
            return this.i.compactDisplay;
        },
        set: function (v) {
            this.i.compactDisplay = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "currency", {
        get: function () {
            return this.i.currency;
        },
        set: function (v) {
            this.i.currency = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "currencyDisplay", {
        get: function () {
            return this.i.currencyDisplay;
        },
        set: function (v) {
            this.i.currencyDisplay = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "currencySign", {
        get: function () {
            return this.i.currencySign;
        },
        set: function (v) {
            this.i.currencySign = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "currencyCode", {
        get: function () {
            return this.i.currencyCode;
        },
        set: function (v) {
            this.i.currencyCode = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "localeMatcher", {
        get: function () {
            return this.i.localeMatcher;
        },
        set: function (v) {
            this.i.localeMatcher = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "notation", {
        get: function () {
            return this.i.notation;
        },
        set: function (v) {
            this.i.notation = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "numberingSystem", {
        get: function () {
            return this.i.numberingSystem;
        },
        set: function (v) {
            this.i.numberingSystem = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "signDisplay", {
        get: function () {
            return this.i.signDisplay;
        },
        set: function (v) {
            this.i.signDisplay = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "style", {
        get: function () {
            return this.i.style;
        },
        set: function (v) {
            this.i.style = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "unit", {
        get: function () {
            return this.i.unit;
        },
        set: function (v) {
            this.i.unit = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "unitDisplay", {
        get: function () {
            return this.i.unitDisplay;
        },
        set: function (v) {
            this.i.unitDisplay = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "useGrouping", {
        get: function () {
            return this.i.useGrouping;
        },
        set: function (v) {
            this.i.useGrouping = ensureBool(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "minimumIntegerDigits", {
        get: function () {
            return this.i.minimumIntegerDigits;
        },
        set: function (v) {
            this.i.minimumIntegerDigits = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "minimumFractionDigits", {
        get: function () {
            return this.i.minimumFractionDigits;
        },
        set: function (v) {
            this.i.minimumFractionDigits = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "maximumFractionDigits", {
        get: function () {
            return this.i.maximumFractionDigits;
        },
        set: function (v) {
            this.i.maximumFractionDigits = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "minimumSignificantDigits", {
        get: function () {
            return this.i.minimumSignificantDigits;
        },
        set: function (v) {
            this.i.minimumSignificantDigits = +v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcNumberFormatSpecifier.prototype, "maximumSignificantDigits", {
        get: function () {
            return this.i.maximumSignificantDigits;
        },
        set: function (v) {
            this.i.maximumSignificantDigits = +v;
        },
        enumerable: true,
        configurable: true
    });
    return IgcNumberFormatSpecifier;
}(IgcFormatSpecifier));
export { IgcNumberFormatSpecifier };
