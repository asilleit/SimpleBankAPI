/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import * as tslib_1 from "tslib";
import { TypeRegistrar } from './type';
import { html, render } from './template';
import { createGuid } from './string';
import { IgcHTMLElement } from './igc-html-element';
import { FontDefaults } from "./FontDefaults";
var requiredStyle = "\n    .ui-tooltip-container {\n        padding: 5px; \n        padding: var(--tooltip-container-padding, 5px);\n        background-color: white; \n        background-color: var(--tooltip-container-background-color, white);\n        border-style: solid; \n        border-style: var(--tooltip-container-border-style, solid);\n        border-width: 1px; \n        border-width: var(--tooltip-container-border-width, 1px);\n        color: " + FontDefaults.tooltipLabelsBrush.fill + "; \n        color: var(--tooltip-container-text-color, " + FontDefaults.tooltipLabelsBrush.fill + ");\n        font: " + FontDefaults.tooltipLabelsFontSize + "px " + FontDefaults.tooltipLabelsFontFamily + ";\n        font: var(--tooltip-container-font, " + FontDefaults.tooltipLabelsFontSize + "px " + FontDefaults.tooltipLabelsFontFamily + ");\n        pointer-events: none;\n        white-space: nowrap;\n        border-color: #666;\n        border-color: var(--tooltip-container-border-color, #666);\n    }\n";
var checked = /*@__PURE__*/ new WeakMap();
var IgcTooltipContainerComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    tslib_1.__extends(IgcTooltipContainerComponent, _super);
    function IgcTooltipContainerComponent() {
        var _this = _super.call(this) || this;
        _this._template = null;
        _this._containerTemplate = null;
        _this._attached = false;
        _this._context = null;
        _this._id = null;
        _this._isBridged = false;
        _this.ensureCss();
        _this.containerTemplate = function (context) { return html(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject(["\n        <div class='ui-tooltip-container'\n            style=\"border-color: ", "\">\n            ", "\n        </div>\n"], ["\n        <div class='ui-tooltip-container'\n            style=\"border-color: ", "\">\n            ", "\n        </div>\n"])), context && context.isSubContent ? 'transparent' : '#666', ((context && _this.template) ? _this.template(context) : html(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([""], [""]))))); };
        return _this;
    }
    //private _tooltipContent: IgcTemplateContentComponent;
    IgcTooltipContainerComponent.prototype.ensureCss = function () {
        if (!document) {
            return;
        }
        if (checked.has(document)) {
            return;
        }
        for (var i = document.head.children.length - 1; i >= 0; i--) {
            var child = document.head.children[i];
            if (child.tagName &&
                child.tagName.toLowerCase() == "style" && child.hasAttribute("data-ig-tooltip-style")) {
                return;
            }
        }
        var style = document.createElement("style");
        style.textContent = requiredStyle;
        style.setAttribute('data-ig-tooltip-style', 'true');
        document.head.appendChild(style);
        checked.set(document, true);
    };
    Object.defineProperty(IgcTooltipContainerComponent.prototype, "template", {
        get: function () {
            return this._template;
        },
        set: function (value) {
            var oldValue = this._template;
            this._template = value;
            this.onTemplateChanged(oldValue, this._template);
        },
        enumerable: true,
        configurable: true
    });
    IgcTooltipContainerComponent.prototype.connectedCallback = function () {
        this.attachedCallback();
    };
    IgcTooltipContainerComponent.prototype.attachedCallback = function () {
        this._attached = true;
        this.classList.add("ig-tooltip-container");
        this.classList.add("igc-tooltip-container");
        this.render();
    };
    IgcTooltipContainerComponent.prototype.diconnectedCallBack = function () {
        if (this.template && this.template.___isBridged) {
            this.teardownBridgedTemplate(this.template);
        }
    };
    Object.defineProperty(IgcTooltipContainerComponent.prototype, "containerTemplate", {
        get: function () {
            return this._containerTemplate;
        },
        set: function (value) {
            this._containerTemplate = value;
            if (this._attached) {
                this.onContainerTemplateChanged();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IgcTooltipContainerComponent.prototype, "context", {
        get: function () {
            return this._context;
        },
        set: function (value) {
            this._context = value;
            this.onContextChanged();
        },
        enumerable: true,
        configurable: true
    });
    IgcTooltipContainerComponent.prototype.onContextChanged = function () {
        this.render();
    };
    IgcTooltipContainerComponent.prototype.teardownBridgedTemplate = function (value) {
        value.___onTemplateTeardown(this._template, this, this._template);
    };
    IgcTooltipContainerComponent.prototype.setupBridgedTemplate = function (value) {
        this._id = createGuid();
        value.___onTemplateInit(this._template, this, this._template);
    };
    IgcTooltipContainerComponent.prototype.onTemplateChanged = function (oldValue, newValue) {
        if (newValue && newValue.___isBridged && !this._isBridged) {
            this.setupBridgedTemplate(newValue);
            this._isBridged = true;
        }
        if (this._attached) {
            this.render();
        }
    };
    IgcTooltipContainerComponent.prototype.onContainerTemplateChanged = function () {
        this.render();
    };
    IgcTooltipContainerComponent.prototype.render = function () {
        if (this._isBridged) {
            if (this.context) {
                this.context.___contentId = this._id;
            }
        }
        if (!this.containerTemplate || !this.context) {
            if (this.containerTemplate) {
                render(this.containerTemplate(this.context), this);
                if (this._isBridged) {
                    this._template.___onTemplateContextChanged(this._template, this, this.context);
                }
            }
            else {
                this.innerHTML = '';
            }
        }
        else {
            render(this.containerTemplate(this.context), this);
            if (this._isBridged) {
                this._template.___onTemplateContextChanged(this._template, this, this.context);
            }
        }
    };
    IgcTooltipContainerComponent.prototype.destroy = function () {
    };
    IgcTooltipContainerComponent.register = function () {
        if (!IgcTooltipContainerComponent._registered) {
            IgcTooltipContainerComponent._registered = true;
            if (window.customElements) {
                window.customElements.define(IgcTooltipContainerComponent.htmlTagName, IgcTooltipContainerComponent);
            }
            else {
                document.registerElement(IgcTooltipContainerComponent.htmlTagName, IgcTooltipContainerComponent);
            }
            TypeRegistrar.registerCons("IgcTooltipContainerComponent", IgcTooltipContainerComponent);
        }
    };
    IgcTooltipContainerComponent._registered = false;
    IgcTooltipContainerComponent.htmlTagName = "igc-tooltip-container";
    return IgcTooltipContainerComponent;
}(IgcHTMLElement));
export { IgcTooltipContainerComponent };
var templateObject_1, templateObject_2;
